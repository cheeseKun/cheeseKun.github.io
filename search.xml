<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[第几次卸载农药]]></title>
      <url>http://cheesekun.top/2017/05/09/cheesekun.top/ch1029/</url>
      <content type="html"><![CDATA[<p>啊，第几次卸载王者荣耀了<br>啊，好费时间<br>啊，好多坑b小学生<br>啊，已经5月了</p>
<p>前些天看到 路人甲 的<a href="http://mp.weixin.qq.com/s/ixkwLCnJKoFg3shlNz3Jow" target="_blank" rel="external">@所有人：别玩王者荣耀了！</a><br>果然这游戏还是用来社交比较好<br>一个人每天花费好几个小时在这上面<br>仔细想想还是太傻了</p>
<p>就这样，戒王者<br>好好学习<br>天天向上<br>😤</p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「MongoDB权威指南」01]]></title>
      <url>http://cheesekun.top/2017/04/28/cheesekun.top/ch1026/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于<code>MongoDB</code> 这个数据库使用起来太舒服了<br>两种查询语句，反正我是莫名喜欢第二种</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">// Mysql</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> <span class="token keyword">table</span>

<span class="token comment" spellcheck="true">// MongoDB</span>
<span class="token number">db</span><span class="token punctuation">.</span><span class="token keyword">table</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以去屠猪馆找了一本「MongoDB权威指南」<br><img src="http://oksbjk6b9.bkt.clouddn.com/MongoDB%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97.jpg" alt=""><br>所以，记笔记记笔记📑</p>
<h2 id="第一部分-MongoDB简介"><a href="#第一部分-MongoDB简介" class="headerlink" title="第一部分-MongoDB简介"></a>第一部分-MongoDB简介</h2><h3 id="动态模式"><a href="#动态模式" class="headerlink" title="动态模式"></a>动态模式</h3><p>集合是动态模式的，意味着他可以任意插入不同类型的键值对<br>这就引出了一个问题，有必要创建多个集合存放不同类型数据么<br>答案是肯定的，从 糅杂，和速度上看，分开时必须额度</p>
<p>这也就是为什么用 <code>mongoose</code> 时，需要先定义 <code>schema</code> 表结构模式，再规定哪张表使用 该<code>schema</code> 模式的 模型 <code>model</code><br>虽然<code>MongoDB</code> 没有强制要求</p>
<h3 id="子集合"><a href="#子集合" class="headerlink" title="子集合"></a>子集合</h3><p>db.blog  // blog 集合下 有两个子集合 posts 和 authors。<br>db.blog.posts<br>db.blog.authors<br>虽然子集合没有特别之处，但是可以使结构更加清晰</p>
<h3 id="json扩展"><a href="#json扩展" class="headerlink" title="json扩展"></a>json扩展</h3><p>一般的json 只有6种数据类型<br><code>null</code>,<code>Boolean</code>,<code>Number</code>,<code>String</code>,<code>Array</code>,<code>Object</code><br>而<code>MongoDB</code>扩展了一些：<br><code>Date</code>,<code>RegExp</code>,<code>ObjectId</code>,<code>内嵌文档</code>,<code>任意javascript代码</code>,<code>二进制数据</code></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    reg<span class="token punctuation">:</span> <span class="token regex">/foobar/i</span><span class="token punctuation">,</span>
    aId<span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    address<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        city<span class="token punctuation">:</span> <span class="token string">"广州"</span><span class="token punctuation">,</span>
        university<span class="token punctuation">:</span> <span class="token string">"xxxx"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    func<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I AM A FUNCTION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><h4 id="自定义shell"><a href="#自定义shell" class="headerlink" title="自定义shell"></a>自定义shell</h4><p>可以创建 <code>mongorc.js</code> 在里面定制自己想要的提示</p>
<p>每次执行完 <code>shell</code> 后，显示该操作的完成时间</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">prompt <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token string">"> "</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>每次执行完 <code>shell</code> 后，显示当前使用的数据库</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">prompt <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> db <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">'(nodb)>'</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        db<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token punctuation">{</span>getLatError<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 捕获数据库错误</span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> db <span class="token operator">+</span> <span class="token string">"> "</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><p>shell 打印使用 <code>print</code></p>
<pre class="line-numbers language-javascript"><code class="language-javascript">arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span>db<span class="token punctuation">.</span>xx<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h3><pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 批量插入，参数为一个多文档数组</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="重大问题"><a href="#重大问题" class="headerlink" title="重大问题"></a>重大问题</h4><p>db.foo.find()  // 返回的是一个数组对象，所以如果要对里面的对象进行修改，要用[]获取</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> bb <span class="token operator">=</span> db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span> ObjectId<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 或者直接使用findOne</span>
bb<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"job"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 给 bb对象添加一个 name</span>
db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>_id<span class="token punctuation">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> bb<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 更新数据库对象，</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>键值对的命名不可以使用 <code>.</code>和<code>$</code>,会影响到obj.obj和修改器的使用，冲突</p>
<h3 id="update修改器"><a href="#update修改器" class="headerlink" title="update修改器"></a>update修改器</h3><p><strong>一个键只能有一个修改器</strong></p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"cheesekun"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>$inc<span class="token punctuation">:</span><span class="token punctuation">{</span>num<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 每次更新，num+1</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>$inc  // 给Number类型增加相应数值<br>$set  //修改键<br>$unset  // 删除键<br>$push  // 添加数组元素,</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span><span class="token string">"cheesekun"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span>$push<span class="token punctuation">:</span> <span class="token punctuation">{</span>comments<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"cheesekun"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
db<span class="token operator">...</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">></span> <span class="token punctuation">{</span>
<span class="token operator">></span>     comments<span class="token punctuation">:</span> <span class="token punctuation">[</span>
<span class="token operator">></span>             <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token operator">...</span>
<span class="token operator">></span>             <span class="token operator">...</span>
<span class="token operator">></span>         <span class="token punctuation">]</span>
<span class="token operator">></span> <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>$addToSet  // 添加数组元素，避免重复插值</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token punctuation">:</span><span class="token string">"cheesekun"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> 
    <span class="token punctuation">{</span>$addToSet<span class="token punctuation">:</span> <span class="token punctuation">{</span>comments<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"cheesekun"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 若comments 数组中已存在"cheesekun"，则不插值</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>$pop  // 删除数组元素，{$pop:{keys:1}}从数组尾部删除，-1从头部删除<br>$pull  // 删除匹配的数组元素</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"cheesekun"</span><span class="token punctuation">,</span>
    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token punctuation">{</span>$pull<span class="token punctuation">:</span> <span class="token punctuation">{</span>arr<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>update(参数1，参数2，true，true)<br>// 参数3表示若集合没有该字段，则用参数2生成该字段<br>// 参数4表示修改所有匹配字段</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 0 表示剔除查询条件中含有name的字段，1 含有</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h3><p><strong>一个键能有多个条件</strong></p>
<blockquote>
<p>$lt    &lt;<br>$lte   &lt;=<br>$gt    &gt;<br>$gte   &gt;=<br>$ne    ≠</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token punctuation">{</span>$gt<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span> $lte<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 查询 15&lt;age&lt;=18 的所有字段</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>$in    单建非查询<br>$nin   逆单键非查询<br>$or    多建非查询</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>arr<span class="token punctuation">:</span> <span class="token punctuation">{</span>$<span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 查询含有 1||9||4 的所有字段</span>
db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$or<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"cheesekun"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>sex<span class="token punctuation">:</span> <span class="token string">"man"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 查询 name==="cheesekun"||sex==="whs" 的字段</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>$and   多键且查询</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$and<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token punctuation">{</span>$lt<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 查询 x&lt;1&amp;&amp;x=4，会出现 {x:[0,4]}的字段</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>$slice<br>返回某个键匹配的数组元素的一个子集</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> conments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token operator">...</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>comments<span class="token punctuation">:</span> <span class="token punctuation">{</span>$slice<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回最后10条数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>$elemMatch<br>对数组对象进行操作，不需要写出所有匹配内容</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>comment<span class="token punctuation">:</span> <span class="token punctuation">{</span>$elemMatch<span class="token punctuation">:</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 匹配 foo 中 comment 数组对象中，{x:1,y:2}的所有字段</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="特定类型查询"><a href="#特定类型查询" class="headerlink" title="特定类型查询"></a>特定类型查询</h4><p>$exists    判断键的存在</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 不仅会查出y为null 的字段，也会检索出不包含y键的字段</span>
db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token punctuation">{</span>$<span class="token keyword">in</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">,</span> $exists<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 只查出y为null 的字段，其实只使用 $in 也能达到效果</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以实现<code>mysql</code></p>
<pre class="line-numbers language-`sql"><code class="language-`sql">select name from table

db.table.find({name: {$exists: true}})
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="使用正则"><a href="#使用正则" class="headerlink" title="使用正则"></a>使用正则</h4><pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token regex">/cheese/i</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将name为cheese所有大小写的字段都检索出来</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>limit(3)  // 只返回3个匹配<br>skip(3)   // 略过前3个匹配<br>sort({“num”: -1})      // 以num降序排序呈现匹配字段</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>foo<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token punctuation">{</span>$gt<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// 检索 x>10 的字段，略去前3个，返回前4个，再升序</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这笔记打的大概只有自己能看了😵<br>这是第一部分的基础内容<br>第二部分的 索引 可以来慢慢啃了</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongDB </tag>
            
            <tag> MongoDB权威指南 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[全栈初体验]]></title>
      <url>http://cheesekun.top/2017/04/25/cheesekun.top/ch1025/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>据说现在不会点后台的前端都找不到工作了<br>吓得我这几天看起了<code>Nodejs</code>和<code>MongoDB</code><br>并且做了一个应该算是最简单的前后端例子，如图<br><img src="http://old5ohki5.bkt.clouddn.com/fullstack01.gif" alt=""><br>输入账户密码，提交表单，保存信息到数据库<br>再重定向到 showInfo 页面获取数据库中的信息，渲染在浏览器上<br>具体代码： <a href="https://github.com/cheeseKun/fullStack/tree/master/infoSave" target="_blank" rel="external">github</a></p>
<h2 id="主要技术"><a href="#主要技术" class="headerlink" title="主要技术"></a>主要技术</h2><blockquote>
<p>前端模板： jade<br>后台框架： express-generator<br>数据库连接： mongoose</p>
</blockquote>
<p>默认电脑已安装<code>nodejs</code>,<code>yarn</code>或者<code>npm</code>,<code>MongoDB</code></p>
<h2 id="前期"><a href="#前期" class="headerlink" title="前期"></a>前期</h2><pre class="line-numbers language-shell"><code class="language-shell">yarn add express-generator  // 
express infoSave  // 创建生成 express 项目

cd infoSave 

yarn install  // 安装依赖包
yarn start  // 可以到 localhost:3000 看到运行界面

yarn add mongoose  // 安装 mongoose，不需要安装jade，express-generator自动安装了
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="中期"><a href="#中期" class="headerlink" title="中期"></a>中期</h2><p>cd views<br>将 index.jade 文件内容修改为</p>
<pre class="line-numbers language-html"><code class="language-html">extends layout
block content
  h1= title
  p Welcome to #{title}
  form(method="post", action="/")
    babel(for="user") 用户名
      input(type="text",name="user",id="user")
    br
    babel(for="passwd") 密码
      input(type="password",name="passwd",id="passwd")
    br
    input(type="submit",value="提交")
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>touch showInfo.jade</p>
<pre class="line-numbers language-html"><code class="language-html">extends layout
block content
  h1= title
  p Welcome to #{title}
  ul
   each info, i in infos
     li
       span.user 账户： #{info.user}
       &amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp
       span.passwd 密码： #{info.passwd}
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两个jade是我们 / 和 /showInfo 两个路由所渲染的页面</p>
<p>cd index.js<br>修改为</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'infoSave'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>添加</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/showInfo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  infos<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> docs<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'showInfo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'showInfo'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'showInfo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      title<span class="token punctuation">:</span> <span class="token string">'showInfo'</span><span class="token punctuation">,</span>
      infos<span class="token punctuation">:</span> docs
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>public文件夹中的stylesheets文件夹新建一个css文件form.css</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">form </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">babel </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">input<span class="token pseudo-class">:not([type="submit"])</span> </span><span class="token punctuation">{</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">input<span class="token attribute">[type="submit"]</span> </span><span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#79f</span><span class="token punctuation">;</span>
  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时 <code>yarn start</code> 会发现 localhost:3000 可以加载<br>localhost:3000/showInfo 会报错，<br>因为我们还没有进行数据的交互</p>
<h2 id="后期"><a href="#后期" class="headerlink" title="后期"></a>后期</h2><p>在  infoSave 目录下，创建两个文件夹<br>schemas文件夹存放数据库集合的模型骨架<br>models文件夹存放Schema构造实例进行数据操作</p>
<p>文件夹schemas, 在里面创建文件 info.js,内容为</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> InfoSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  user<span class="token punctuation">:</span> String<span class="token punctuation">,</span>
  passwd<span class="token punctuation">:</span> String
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 导出InfoSchema模式</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> InfoSchema<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>文件夹models，创建文件 info.js，内容为</p>
<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> infoSchema <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../schemas/info.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//引入'../schemas/info.js'导出的模式模块</span>

<span class="token comment" spellcheck="true">// 编译生成info模型</span>
<span class="token keyword">let</span> infos <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">,</span> infoSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 将info模型[构造函数]导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> infos<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>app.js文件添加</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 连接MongoDB中的 infoDB 数据库，若没有则自动生成</span>
<span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://127.0.0.1:27017/infosDB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>到此，我们的工程结束了，<br><code>yarn start</code>试试看，记得先开启MongoDB</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>啊，有一种搬代码，没有写教程的感觉<br>hhh<br>第一次自己搭建运行前后端环境，真是愉悦呀<br>继续加油。。。<br>🙃</p>
]]></content>
      
        <categories>
            
            <category> 全栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> MongoDB </tag>
            
            <tag> jade </tag>
            
            <tag> express </tag>
            
            <tag> mongoose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mongoose]]></title>
      <url>http://cheesekun.top/2017/04/23/cheesekun.top/ch1025/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学数据库肯定需要知道怎么连接后台<br><code>Mongoose</code> 是用来方便连接 <code>MongoDB</code> 与 <code>node</code> 的一个工具包<br>是时候学习一波</p>
<h2 id="nodejs连接MongoDB"><a href="#nodejs连接MongoDB" class="headerlink" title="nodejs连接MongoDB"></a>nodejs连接MongoDB</h2><p>连接数据库前需要先打开数据库 MongoDB</p>
<pre class="line-numbers language-git"><code class="language-git">yarn add mongoose  // 安装 mongoose 依赖
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"mongodb://127.0.0.1:27107/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败："</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
db<span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"------数据库连接成功！------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="操纵数据"><a href="#操纵数据" class="headerlink" title="操纵数据"></a>操纵数据</h2><ol>
<li>Schema：数据库集合的模型骨架，或者是数据属性模型传统意义的表结构。</li>
<li>Model ：通过Schema构造而成，除了具有Schema定义的数据库骨架以外，还可以具体的操作数据库。</li>
<li>Entity：通过Model创建的实体，它也可以操作数据库。<blockquote>
<p>但Model比Entity更具操作性。</p>
</blockquote>
</li>
</ol>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"mongoose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> db <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"mongodb://127.0.0.1:27017/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> TestSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用 Schema 创建集合结构(表结构)</span>
    name <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>String <span class="token punctuation">}</span><span class="token punctuation">,</span>
    age  <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>String <span class="token punctuation">}</span><span class="token punctuation">,</span>
    time <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span>Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> TestModel <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> TestSchema <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// test1 集合使用 Schema 结构，若不存在 test1 集合，则创建</span>
<span class="token keyword">let</span> TestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用 TestModel 新建一个数据</span>
    name <span class="token punctuation">:</span> <span class="token string">"helloworld"</span><span class="token punctuation">,</span>
    age  <span class="token punctuation">:</span> <span class="token number">28</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token string">"helloworld@qq.com"</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
TestEntity<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>doc<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 保存数据于 test1 </span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error :"</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Model增删查改"><a href="#Model增删查改" class="headerlink" title="Model增删查改"></a>Model增删查改</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> TestSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>String <span class="token punctuation">}</span><span class="token punctuation">,</span>
    age  <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    email<span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>String <span class="token punctuation">}</span><span class="token punctuation">,</span>
    time <span class="token punctuation">:</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span>Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span>Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> TestModel <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> TestSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token comment" spellcheck="true">// let TestModel = db.model("test1", new mongoose.Schema());</span>
<span class="token comment" spellcheck="true">// 集合结构为空的话，不能插入数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ul>
<li>Model方法 create<pre class="line-numbers language-javacript"><code class="language-javacript">TestModel.create({ name:"model_create", age:26}, function(error,doc){
  if(error) {
      console.log(error);
  } else {
      console.log(doc);
  }
});
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>entity方法 save<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> Entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestModel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"entity_save"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span> <span class="token number">27</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Entity<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span>doc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>Model.remove(查询条件,callback);</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> conditions <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'helloworld'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
TestModel<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Delete success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>Model.update(查询条件,更新对象,callback)</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> conditions <span class="token operator">=</span> <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token string">'test_update'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> update <span class="token operator">=</span> <span class="token punctuation">{</span>$<span class="token keyword">set</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span> age <span class="token punctuation">:</span> <span class="token number">16</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// $set 表示只修改 age，否则全覆盖</span>
TestModel<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Update success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>Model.find({}, function(error, docs));<br>若第一个参数为空对象，则 <code>docs</code> 为所有数据</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">TestModel<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"error :"</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//docs: age为28的所有文档</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="深海巨坑"><a href="#深海巨坑" class="headerlink" title="深海巨坑"></a>深海巨坑</h3><p>使用 <code>mongoose</code> 时，发现<code>mongoose</code>会自动帮你把 <code>model</code>中的集合名改为复数，<br>也就是说。如果你设置</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> model <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span>table<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 你在数据库中想创建的 table 集合会变成 table</span>
<span class="token comment" spellcheck="true">// 如果你的数据库中的集合名不是复数 s ，那么基本操作不了</span>
<span class="token comment" spellcheck="true">// 也就是说，你最好把你要使用`mongoose`操作的集合名设置为复数 s</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>学习源： <a href="http://www.hubwiz.com/course/543b2e7788dba02718b5a4bd/" target="_blank" rel="external">Mongoose</a><br>真是通俗易懂的操作呀<br>MongoDB 好感度 up up up<br>😂</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongDB </tag>
            
            <tag> Mongoose </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MongDB 初体验]]></title>
      <url>http://cheesekun.top/2017/04/21/cheesekun.top/ch1024/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近了解了下 <code>MongoDB</code>，发现是一个特别棒的 <code>nosql</code> 数据库<br>使用 <code>json</code> 数据存储，可以使用 js 语句<br>简直就是为前端走全栈使用的<br><img src="http://oksbjk6b9.bkt.clouddn.com/mongodb-logo.png" alt=""></p>
<table>
<thead>
<tr>
<th style="text-align:left">SQL术语/概念</th>
<th style="text-align:center">MongoDB术语/概念</th>
<th style="text-align:right">解释/说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">database</td>
<td style="text-align:center">database</td>
<td style="text-align:right">数据库</td>
</tr>
<tr>
<td style="text-align:left">table</td>
<td style="text-align:center">collection</td>
<td style="text-align:right">数据库表/集合</td>
</tr>
<tr>
<td style="text-align:left">row</td>
<td style="text-align:center">document</td>
<td style="text-align:right">数据记录行/文档</td>
</tr>
<tr>
<td style="text-align:left">column</td>
<td style="text-align:center">field</td>
<td style="text-align:right">数据字段/域</td>
</tr>
<tr>
<td style="text-align:left">index</td>
<td style="text-align:center">index</td>
<td style="text-align:right">索引</td>
</tr>
<tr>
<td style="text-align:left">table</td>
<td style="text-align:center">joins</td>
<td style="text-align:right">表连接,MongoDB不支持</td>
</tr>
<tr>
<td style="text-align:left">primary key</td>
<td style="text-align:center">primary key</td>
<td style="text-align:right">主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody>
</table>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><pre class="line-numbers language-javascript"><code class="language-javascript">show dbs   <span class="token comment" spellcheck="true">// 查看当前系统有多少数据库</span>
use <span class="token punctuation">[</span>dbs name<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 切换数据库，若没有当前数据库，db会在适当时候生成</span>
db<span class="token punctuation">.</span><span class="token function">dropDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除当前数据库</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p><em>集合(collections) 也就相当于 sql 中的 表(table)</em></p>
<h3 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h3><blockquote>
<p>db.info.insert({json})    // 向 info 集合插入json数据<br>db.info.insert([{},{}])      // 向 info 集合插入多条json数据</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 可使用js'语句</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h3><pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将所有 {y: 999} 的数据移除, true只删除第一个，默认false</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">drop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除info集合(表)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将 x:3 的字段用 x: 666 覆盖</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// {x: 666, _id: ...}  完全覆盖</span>

<span class="token comment" spellcheck="true">// 只修改 x， 而不覆盖y，z</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">666</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// {x: 3, y: 3, z: 3, _id:...}</span>

<span class="token comment" spellcheck="true">//更新不存在数据时插入数据</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">}</span>， <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true表示若该数据不存在，则自动创建插入数据</span>

<span class="token comment" spellcheck="true">//更新多条数据，默认只更新第一条</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>$<span class="token keyword">set</span><span class="token punctuation">:</span><span class="token punctuation">{</span>y<span class="token punctuation">:</span> <span class="token number">999</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第4个参数true表示将所有{y: 100} 的数据更新为{y: 999}</span>
若不需要写<span class="token number">4</span>个参数，可指定参数，第三个参数为<span class="token punctuation">{</span>upsert<span class="token punctuation">:</span> boolean<span class="token punctuation">}</span><span class="token punctuation">,</span> 第四个参数为<span class="token punctuation">{</span>multi<span class="token punctuation">:</span> boolean<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><blockquote>
<p>show collections  // 查看当前数据库的所有集合<br>db.info.find()  // 查看当前集合的所有字段<br>条件集</p>
<ol>
<li>大于($gt)</li>
<li>大于等于($gte)</li>
<li>小于($lt)</li>
<li>小于等于($lte)</li>
<li>不等于($ne)</li>
<li>包含于($in)</li>
<li>不包含于($nin)</li>
</ol>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>过滤条件<span class="token punctuation">)</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 查看条数</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 过滤前3条数据，只保存前两条，用x正序排序，倒叙-1</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> <span class="token string">'tags.0'</span> <span class="token punctuation">:</span> <span class="token string">'fruit'</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 特定元素匹配，tags值数组的第一个元素</span>

db<span class="token punctuation">.</span>person<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$and<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token punctuation">{</span>$gt<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"Lucy"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// age>30 且 name="Lucy"</span>
db<span class="token punctuation">.</span>person<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$or<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>status<span class="token punctuation">:</span><span class="token string">"A"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// age=30 且 status="A"</span>
db<span class="token punctuation">.</span>person<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 显示含有name的数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><p><em>索引通常能够极大的提高查询的效率</em><br><em>在系统中使用查询时，应该考虑建立相关的索引</em></p>
<h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p><strong>索引应该在数据库一开始创建好</strong></p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">getIndexes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 查看当前集合的索引</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">ensureIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 创建索引，1为正向排序</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">ensureIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"normal_index"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将索引命名为 normal_index</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">ensureIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>unique<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设置唯一索引，集合不能插入相同索引值</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">dropIndex</span><span class="token punctuation">(</span><span class="token string">"normal_index"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 删除 normal_index 索引</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="索引的种类"><a href="#索引的种类" class="headerlink" title="索引的种类"></a>索引的种类</h3><ol>
<li>_id索引<blockquote>
<p>MongoDB 默认为每一字段生成 _id</p>
</blockquote>
</li>
<li>单键索引<blockquote>
<p>{x: 1}</p>
</blockquote>
</li>
<li>多键索引<blockquote>
<p>{x: [1,2,3,4,5]}</p>
</blockquote>
</li>
<li>复合索引<blockquote>
<p>{x:1, y:1}</p>
</blockquote>
</li>
<li><p>过期索引</p>
<blockquote>
<p>在一段时间之后会过期的索引，过期后相应数据会被删除<br>适合存储一段时间之后会失效的用户的登录信息，存储的日志<br>存在时间误差，最小删除时间为 30s</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">ensuerIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>time<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>expireAfterSeconds<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 30s 后删除 {time: 1}索引 </span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>time<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 必须是ISODate 或者 ISODate数组，否则不会自动删除，ISODate数组会以其中的最小时间进行删除</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<hr>
<h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>只允许创建一个全文索引<br>db.info.ensureIndex({article: “text”})  // 与其他索引不同，全文索引的 value 不是排序的 1，-1， 而是一个固定的字符串<br>使用全文索引就可以避免去写那些繁琐的匹配函数了</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">ensureIndex</span><span class="token punctuation">(</span><span class="token punctuation">{</span>article<span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>article<span class="token punctuation">:</span> <span class="token string">"aa bb cc dd ee ff"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>article<span class="token punctuation">:</span> <span class="token string">"aa cc dd ee ff"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>article<span class="token punctuation">:</span> <span class="token string">"aa cc dd e"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>article<span class="token punctuation">:</span> <span class="token string">"aa cc dd uu ii ww ee ff"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$text<span class="token punctuation">:</span> <span class="token punctuation">{</span>$search<span class="token punctuation">:</span> <span class="token string">"aa"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 检索字段中 article 键值含有"aa"的所有字段</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$text<span class="token punctuation">:</span> <span class="token punctuation">{</span>$search<span class="token punctuation">:</span> <span class="token string">"aa bb cc"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 检索字段中 article 键值含有 "aa" 或者 "bb" 或者 "cc"的所有字段</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$text<span class="token punctuation">:</span> <span class="token punctuation">{</span>$search<span class="token punctuation">:</span> <span class="token string">"aa bb -cc"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 检索字段中 article 键值含有 "aa" 或者 "bb" 并且不包含 "cc" 的所有字段</span>
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$text<span class="token punctuation">:</span> <span class="token punctuation">{</span>$search<span class="token punctuation">:</span> <span class="token string">"\"aa\" \"bb\" \"cc\""</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 检索字段中 article 键值含有 "aa", "bb" 和 "cc"的字段</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="全文索引相似度"><a href="#全文索引相似度" class="headerlink" title="全文索引相似度"></a>全文索引相似度</h4><pre class="line-numbers language-javascript"><code class="language-javascript">使用 $meta 来获取索引的相似度数值
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$text<span class="token punctuation">:</span> <span class="token punctuation">{</span>$search<span class="token punctuation">:</span> <span class="token string">"aa bb"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>score<span class="token punctuation">:</span> <span class="token punctuation">{</span>$meta<span class="token punctuation">:</span> <span class="token string">"textScore"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// </span>
检索<span class="token string">"aa bb"</span><span class="token punctuation">,</span>计算出相似值
db<span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span>$text<span class="token punctuation">:</span> <span class="token punctuation">{</span>$search<span class="token punctuation">:</span> <span class="token string">"aa bb"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>score<span class="token punctuation">:</span> <span class="token punctuation">{</span>$meta<span class="token punctuation">:</span> <span class="token string">"textScore"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>score<span class="token punctuation">:</span> <span class="token punctuation">{</span>$meta<span class="token punctuation">:</span> <span class="token string">"textScore"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// </span>
检索<span class="token string">"aa bb"</span><span class="token punctuation">,</span>计算出相似值<span class="token punctuation">,</span>并利用相似值进行排序
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="全局索引限制"><a href="#全局索引限制" class="headerlink" title="全局索引限制"></a>全局索引限制</h4><blockquote>
<p>每次查询，只能指定一个 <code>$text</code> 查询，并且 <code>$text</code> 不能出现在 <code>$nor</code> 查询中<br>全文索引不支持中文</p>
</blockquote>
<h3 id="地理位置索引"><a href="#地理位置索引" class="headerlink" title="地理位置索引"></a>地理位置索引</h3><p>略</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>用起来很舒服的一个数据库<br>就决定是你了，MongoDB。<br>😀</p>
]]></content>
      
        <categories>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongDB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue好棒]]></title>
      <url>http://cheesekun.top/2017/04/16/cheesekun.top/ch1023/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前些天ES6看得差不多了，就想着捡起以前学了一点点的<code>vue</code>。<br>不学不要紧。连带得把<code>yarn</code>,<code>webpack</code>给学了。<br><code>yarn</code>的话是一个比<code>npm</code>强大的包管理工具，很简单使用<br><code>webpack</code>是一个前端资源模块化管理和打包工具，十分强大，但配置起来很要命</p>
<h2 id="vue成绩录入小例子"><a href="#vue成绩录入小例子" class="headerlink" title="vue成绩录入小例子"></a>vue成绩录入小例子</h2><p>学什么都要弄点小玩意练练手，所以用vue写了个<code>java</code>实训的成绩录入<br>示例: <a href="http://cheesekun.top/score-enter">demo</a><br>源码: <a href="https://github.com/cheeseKun/vue-list" target="_blank" rel="external">github</a></p>
<h3 id="铲掉重写"><a href="#铲掉重写" class="headerlink" title="铲掉重写"></a>铲掉重写</h3><p><code>vue</code>有一个特别棒的功能就是组件(conpenent)，能把页面上的各部分进行拆分，<br>再利用ES6的<code>import</code>，<code>export</code>导入导出。<br>一开始觉得特别棒，所以边看文档边弄实例。<br>结果gg了，因为如果拆分的组件涉及到复杂的数据传输，就会特别麻烦。<br>不过也由于这个失误，知道了怎么进行父子组件的传参。</p>
<h3 id="简单父子传参"><a href="#简单父子传参" class="headerlink" title="简单父子传参"></a>简单父子传参</h3><ul>
<li>父向子组件传参<pre class="line-numbers language-javascript"><code class="language-javascript">父：<span class="token operator">&lt;</span>componentA msgFromFather<span class="token operator">=</span><span class="token string">"from father"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>componentA<span class="token operator">></span>  <span class="token comment" spellcheck="true">//如果msgFromFather是动态的，可以:msgFromFather.</span>
子：<span class="token operator">&lt;</span>button @cllick<span class="token operator">=</span><span class="token string">"consoleInfo"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"msgFromFather"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//先声明调用父组件的变量</span>
methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token function">consoleInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>msgFromFather<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>子向父组件传参</p>
<blockquote>
<p>使用 $on(eventName) 监听事件<br>使用 $emit(eventName) 触发事件</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript">父：<span class="token operator">&lt;</span>course v<span class="token operator">-</span>on<span class="token punctuation">:</span>child<span class="token operator">=</span><span class="token string">"showScore"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>course<span class="token operator">></span>
<span class="token function">子：setCBgColor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>nowSelected <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'child'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nowSelected<span class="token punctuation">.</span>scores<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一个参数为父组件函数绑定的自定义事件，剩余参数为传参</span>
  <span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="vue脚手架"><a href="#vue脚手架" class="headerlink" title="vue脚手架"></a>vue脚手架</h3><blockquote>
<p><code>vue-cli</code>, vue 提供的一个脚手架工具</p>
</blockquote>
<p>里面已经配置好webpack，可以直接利用它来写一个<code>单页spa</code></p>
<pre class="line-numbers language-shell"><code class="language-shell">yarn add global vue-cli   // 全局安装vue脚手架
vue init webpack vue-todolist  // 创建一个webpack模板的新项目
cd vue-todolist
yarn install  安装所需依赖
yarn run dev  监听8080端口index.html
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>神奇的 MVVM 框架，对那些之前很懵懂的前端模块化，组件化，工程化<br>有了一个大概的认识，😝</p>
<blockquote>
<p>素晴らしい</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[包管理工具 Yarn]]></title>
      <url>http://cheesekun.top/2017/04/07/cheesekun.top/ch1022/</url>
      <content type="html"><![CDATA[<p><img src="http://oha7s5kdd.bkt.clouddn.com/yarn.png" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>facebook 新推出的包管理工具，用来代替 npm ，<br>npm 我都没怎么使用，索性直接 yarn 先</p>
<h2 id="命令行集合"><a href="#命令行集合" class="headerlink" title="命令行集合"></a>命令行集合</h2><pre class="line-numbers language-shell"><code class="language-shell">yarn -h 查看yarn的命令集合

> mkdir yarn-project
> cd yarn-project

yarn init  // 初始化项目
yarn install  // 安装package.json内的包

yarn add <package name>  // 安装包
yarn add global <package name>  // 全局安装包
yarn add <package name> --offline  // 离线安装本地包
> yarn add webpack  // 安装一个 webpack 包，`npm install webpack`

yarn remove <package name>  // 移除不需要的包

yarn upgrade <package name>  // 升级包版本
> yarn upgrade webpack  // 升级webpack，`npm update webpack`

yarn cache ls  // 查看本地缓存的所有yarn包
yarn cache dir // 查看本地缓存包的存放路径
yarn cache clean  // 将本地的所有缓存包移除

yarn global ls  // 查看全局安装的包
yarn list  // 查看根目录下安装的包

yarn config list  // 给出 yarn 和 npm 的设置(包括远端地址)
yarn config set  // 修改 config
> yarn config set registry registry.npm.taobao.org  // 将 yarn 访问路径修改为淘宝路径

yarn info  //查看包的信息(远程的包)
> yarn info vue
> 查看 vue 的各种信息

yarn self-update  // 更新 yarn 自己

yarn why <package name>  // 分析为啥项目需要这个包
> yarn why webpack  // 分析 webpack
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>yarn run    // 执行 package.json 的scripts</strong></p>
<blockquote>
<p>yarn run create-dir    // 执行 create-dir 这个命令</p>
</blockquote>
<pre class="line-numbers language-json"><code class="language-json">// package.json
<span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"yarn-project"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"cheesekun"</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^2.3.3"</span><span class="token punctuation">,</span>
    <span class="token property">"wide-align"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"create-dir"</span><span class="token operator">:</span> <span class="token string">"mkdir demo"</span><span class="token punctuation">,</span>
      <span class="token property">"rm-dir"</span><span class="token operator">:</span> <span class="token string">"rm -rf demo"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>前端工具实在是太多了，任重道远<br>还有最心酸的webpack<br>啊<br>。。。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
            <tag> Yarn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初2-4」李さんは　日本語で　手紙を　書きます]]></title>
      <url>http://cheesekun.top/2017/03/31/cheesekun.top/ch1021/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>プレゼンと　　礼物</li>
<li>お金（おかね）　　钱</li>
<li>名前（なまえ）　　姓名</li>
<li>箸（はし）　　筷子</li>
<li>航空便（こうくうびん）　　航空邮件<blockquote>
<p>外来语「エアメール」　airmail<br>この手紙（てがみ）、航空便お願いします　　-&gt;请麻烦帮我把这封信寄航空邮件吧</p>
</blockquote>
</li>
<li>件（けん）　　事件<blockquote>
<p>某件事情，一般指对方已知的<br>レの件話（わ）どうしましたか　　-&gt;那件事怎么样了？</p>
</blockquote>
</li>
<li>送ります（おくります）　寄<blockquote>
<p>可以理解为送东西给某人，也可以解释为寄<br>友達の誕生日にプレゼントを送りました　　-&gt; 朋友生日的时候送了礼物</p>
</blockquote>
</li>
<li>作ります（つくります）　　制造<blockquote>
<p>木（き）で机（つくえ）を<br>ります　　-&gt; 用木材做桌子</p>
</blockquote>
</li>
<li>出します（だします）　　寄<blockquote>
<p>一般解释为拿出，寄出，也可以表示寄信的寄<br>手（て）をだします　　-&gt; 伸出手来<br>家へ手紙を出します　　-&gt; 给家里寄信</p>
</blockquote>
</li>
<li>届きます（とどきます）　　收到，送到<blockquote>
<p>送到对方处<br>誕生日に娘から絵が届きます　　-&gt; 生日时收到了女儿的信</p>
</blockquote>
</li>
<li>貸します（かします）　　借给，借出<blockquote>
<p>相当于英语的”lend”<br>借给谁，谁来借，都用动词「に」<br>友達にお金を貸しました　　-&gt; 借给朋友钱了</p>
</blockquote>
</li>
<li>習います（ならいます）　　学习<blockquote>
<p>学习某样技能，也可以指练习<br>向谁学习，使用组词「に」<br>李さんに日本語を習います　　-&gt; 跟小李学习日语</p>
</blockquote>
</li>
<li>かけます　　打(电话)<blockquote>
<p>有很多意思，初级掌握”打电话”<br>给某人打电话，助词「へ」「に」都可以使用<br>昨日（きのう）母へ電話をかけました　　-&gt; 昨天他给妈妈打电话了</p>
</blockquote>
</li>
<li>借ります（かります）　　(向别人)借<blockquote>
<p>相当于英语的”borrow”<br>使用助词「に」或「から」<br>先月（せんげつ）図書館から本を借りました　　-&gt;上个月我去图书馆借了书</p>
</blockquote>
</li>
<li>教えます（おしえます）　　教<blockquote>
<p>教授技能，或者教某人<br>あの先生は歴史（れきし）を教えます　　-&gt; 那位老师是教历史的</p>
</blockquote>
</li>
<li>さっき　　刚才<blockquote>
<p>さっきの客（きゃく）は誰ですか。　　-&gt; 刚才那个客人是谁啊?<br>さっきはごめんね　　-&gt; 刚才对不起了</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>名【工具】＋で动词　　用…做（某事）<blockquote>
<p>除了接<strong>交通工具</strong>的名词外，还可以可以借表示<strong>工具，原材料或其他手段</strong>的名词<br>李さんは日本語で手紙を書きます　　-&gt; 小李用日语写信<br>何でうどんを作（つく）りました　　-&gt; 用什么做乌冬面<br>中国人は箸でご飯を食べます　　-&gt; 中国人用筷子吃饭</p>
</blockquote>
</li>
<li>名1【人】は名2【人】に名3【物】をあげます　　（某人）给（某人）某物<blockquote>
<p><strong>给</strong>,名2不可以用第一人称<br>私は李さんにお土産（みやげ）をあげます　　-&gt; 我给李先生一件礼物<br>弟は李さんに花をあげました　　-&gt; 弟弟送花给小李</p>
</blockquote>
</li>
<li>名1【人】は名2【人】に/から名3【物】をもらいます　　（某人）从（某人）处得到（某物）<blockquote>
<p><strong>得</strong> 名2通常用「に」，但如果授予方为组织或团体，多使用「から」<br>私は李さんに辞書（じしょ）をもらいました　　-&gt; 我从小李那得到一本词典</p>
</blockquote>
</li>
<li>名【人】に会（あ）います　　见（某人），遇见（某人）<blockquote>
<p><strong>特殊</strong>，遇到某人不能用「を」，特殊动宾关系，用「に」<br>私は駅で李さんにありました　　-&gt; 我在车站遇见了小李<br>今日は誰と会いましたか　　-&gt; 今天和谁见面了?</p>
</blockquote>
</li>
<li>よ　　表示提醒<blockquote>
<p>用于句末，多表示告知，轻微警告的语气<br>A: すみません、李さんはいますか　　-&gt; 请问，小李在吗?<br>B: もう帰りましたよ　　-&gt; 已经回去了<br>太り（ふとり）ますよ　　-&gt; 那你要变胖的</p>
</blockquote>
</li>
<li>もう　　已经<blockquote>
<p>使用总是跟过去时「～ました」，表示动作已完。<br>表示时间晚时，如「もう９時です」，已经9点了，不需要用过去时<br>A： 昼ご飯（ひるごはん）を食べましたか　　-&gt; 你吃过午饭了吗?　　<br>B： ええ、もう食べ（たべ）ました 　　-&gt; 是的，我已经吃过了</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Js阶段性小笔记[1]]]></title>
      <url>http://cheesekun.top/2017/03/30/cheesekun.top/ch1020/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>每隔一段时间，就会了解到一些js之前没怎么注意，或者一些坑的知识点。<br>做个阶段性的笔记，以后翻到又会有一番意识。</p>
<h2 id="基本类型，引用类型"><a href="#基本类型，引用类型" class="headerlink" title="基本类型，引用类型"></a>基本类型，引用类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><blockquote>
<p>保存在栈内存中的简单数据段，这种值完全保存在内存中的一个位置<br><code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code> (new in ES 6)</p>
</blockquote>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><blockquote>
<p>保存在堆内存中的对象，<br>JavaScript不允许直接访问堆内存空间中的位置和操作堆内存空间，只能通过操作对象在栈内存中的引用地址。所以引用类型的数据，在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存在堆内存中的对象。</p>
</blockquote>
<h2 id="浅拷贝，深拷贝"><a href="#浅拷贝，深拷贝" class="headerlink" title="浅拷贝，深拷贝"></a>浅拷贝，深拷贝</h2><p><em>由于引用类型的值存储在堆内存中，值会被共用，所以出现了两种拷贝方式</em></p>
<h3 id="浅拷贝（shallow-copy）"><a href="#浅拷贝（shallow-copy）" class="headerlink" title="浅拷贝（shallow copy）"></a>浅拷贝（shallow copy）</h3><p><em>拷贝原对象的引用</em></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 修改copy会改变原对象的值</span>
<span class="token keyword">let</span> cheesekun <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"cheesekun"</span><span class="token punctuation">,</span> 
    age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> copyCheesekun <span class="token operator">=</span> cheesekun<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Array.prototype.slice()</code>和<code>Array.prototype.concat()</code>都会返回一个数组或者对象的浅拷贝</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> cheesekun <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'cheesekun'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> copyCheesekun <span class="token operator">=</span> cheesekun<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
copyCheesekun<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cheesekun<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20, 引用类型拷贝的是引用，会互相影响</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="深拷贝（deep-copy）"><a href="#深拷贝（deep-copy）" class="headerlink" title="深拷贝（deep copy）"></a>深拷贝（deep copy）</h3><p><em>深拷贝也就是拷贝出一个新的实例，新的实例和之前的实例互不影响</em></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用JSON序列化实现一个深拷贝</span>
<span class="token keyword">let</span> deepClone <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cheesekun <span class="token operator">=</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        age<span class="token punctuation">:</span> <span class="token number">19</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> copyCheesekun <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>cheesekun<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => {arr: [1,2,3], obj: {age: 19}}</span>
copyCheesekun<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cheesekun<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//19 两个完全不同的实例，不会相互影响</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="几个好用数组方法"><a href="#几个好用数组方法" class="headerlink" title="几个好用数组方法"></a>几个好用数组方法</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><em>创建一个新数组，数组中的每个元素调用回调函数</em></p>
<blockquote>
<p><code>arr.map(callback,[thisArg])</code><br>回调函数3参数：[当前元素]，[当前索引]，[调用数组]<br>[thisArg] 可选的。执行 callback 函数时 使用的this 值。</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token operator">></span> x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [1, 25, 100, 225]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p><em>创建一个包含所有通过测试的元素的新数组</em></p>
<blockquote>
<p><code>arr.filter(callback,[thisArg])</code><br>回调函数3参数：[当前元素]，[当前索引]，[调用数组]<br>[thisArg] 可选的。执行 callback 函数时 使用的this 值。</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// [12, 130, 44]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><em>一个用来累加的函数</em></p>
<blockquote>
<p><code>arr.reduce(callback,[initialValue])</code><br>回调函数3参数：[上一次回调的值/初始值]，[正在处理的值]，[正在处理的值的索引]<br>[initialValue]初始值。如果提供了 initialValue ，索引值从0开始；否则从1开始</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prev<span class="token operator">+</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//15</span>
<span class="token punctuation">[</span>
 <span class="token punctuation">{</span>
    <span class="token string">"subject"</span><span class="token punctuation">:</span> <span class="token string">"math"</span><span class="token punctuation">,</span>
    <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token number">88</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span>
    <span class="token string">"subject"</span><span class="token punctuation">:</span> <span class="token string">"chinese"</span><span class="token punctuation">,</span>
    <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token number">95</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token punctuation">{</span>
    <span class="token string">"subject"</span><span class="token punctuation">:</span> <span class="token string">"english"</span><span class="token punctuation">,</span>
    <span class="token string">"score"</span><span class="token punctuation">:</span> <span class="token number">80</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span>next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prev <span class="token operator">+</span> next<span class="token punctuation">.</span>score<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//263</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="对象中的function"><a href="#对象中的function" class="headerlink" title="对象中的function"></a>对象中的function</h2><p><em>对象中，方法内如果还有普通函数，该函数this指向全局，若箭头函数，看上下文</em></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"noCheesekun"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//let有自己的块级作用域，所以不是window.age</span>
<span class="token keyword">let</span> cheesekun <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"cheesekun"</span><span class="token punctuation">,</span>
  age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
cheesekun<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"noCheesekun is undefined"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>都是一些很基础，但也容易遗忘出错的小玩意。<br>多留个心眼hhh</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> 小总结系列 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6 第一弹]]></title>
      <url>http://cheesekun.top/2017/03/28/cheesekun.top/ch1019/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实之前有稍微得了解到ES6，但是自己ES5都写的不好，所以将它放了一段时间<br>之后写JS就都使用ES6的语法了，毕竟好用<br>完整的ES6语法可以看阮一峰老师的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6 入门</a><br>我就码下一些觉得比较有用的小知识点</p>
<h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><blockquote>
<p>let定义变量，const定义常量<br>让ES6增加了块级作用域</p>
</blockquote>
<ul>
<li><p>let</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
 <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
 <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a  <span class="token comment" spellcheck="true">// ReferenceError: a is not defined.</span>
b  <span class="token comment" spellcheck="true">// 5</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>let 不能重复声明<br>并且let定义的值拥有块级作用域，不会污染到全局变量</p>
</li>
<li><p>const</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> cheesekun <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> cheesekun<span class="token punctuation">,</span> sex<span class="token punctuation">:</span> man<span class="token punctuation">}</span><span class="token punctuation">;</span>

a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Assignment to constant variable</span>
cheesekun<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"kuncheese"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"kuncheese"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>const</code> 定义的常量不能修改，但是定义的对象的属性值可以修改</p>
</li>
</ul>
<h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p><em>从数组和对象(或者其他可便利对象，如字符串)中提取值，对变量进行赋值</em></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 给变量赋值</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"kun"</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span>age<span class="token punctuation">,</span> name<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"cheesekun"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a  <span class="token comment" spellcheck="true">//1</span>
x  <span class="token comment" spellcheck="true">//"k"</span>
name <span class="token comment" spellcheck="true">//"cheesekun"</span>

<span class="token comment" spellcheck="true">//数值交换</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>j<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
i  <span class="token comment" spellcheck="true">//5</span>

<span class="token comment" spellcheck="true">//函数传参</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//快速获取JSON数据</span>
<span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
  status<span class="token punctuation">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">867</span><span class="token punctuation">,</span> <span class="token number">5309</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> status<span class="token punctuation">,</span> data<span class="token punctuation">:</span> number <span class="token punctuation">}</span> <span class="token operator">=</span> jsonData<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> status<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 42, "OK", [867, 5309]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p><em>用反引号 ` 标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。</em><br>我们以前写大段的<code>innerHTML</code>都是使用 + 号连接，<br>现在有模板字符串，无须 + ，并且可以回车排版</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"cheessekun"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`
  我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,
  我居然可以换行 
`</span></span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//cons出来的也是有换行的</span>

<span class="token comment" spellcheck="true">//大段innerHTML</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token string">`
  &lt;strong>我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,&lt;/strong>
  &lt;i>我居然可以换行&lt;/i> 
`</span></span>
a<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"cheesekun.top"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 调用函数</span>
<span class="token keyword">function</span> fn <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token string">'llo Wor'</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`He</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ld.`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hello World</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Number的变化"><a href="#Number的变化" class="headerlink" title="Number的变化"></a>Number的变化</h2><p><em>之前许多全局的方法都移植到了原生 <code>Number</code> 对象方法，不使用全局变量</em></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 原有写法,还是可以使用，但要避免使用</span>
<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'12.34'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123.45#'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123.45</span>
<span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token comment" spellcheck="true">// ES6 的写法</span>
Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'12.34'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 12</span>
Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123.45#'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123.45</span>
Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> <em>Math.sign()方法。判断一个数是正数，负数，还是0；</em></p>
<pre class="line-numbers language-javascript"><code class="language-javascript"> Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1</span>
 Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// +1</span>
 Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// +0</span>
 Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -0</span>
 Math<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NaN</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Array的拓展"><a href="#Array的拓展" class="headerlink" title="Array的拓展"></a>Array的拓展</h2><blockquote>
<p>from()</p>
<blockquote>
<p>把类数组对象(有length属性)/可遍历对象转化为数组</p>
</blockquote>
<p>find()和findIndex()</p>
<blockquote>
<p>找出第一个符合条件的数组成员, 和下标，参数是一个回调函数</p>
</blockquote>
<p>includes()</p>
<blockquote>
<p>返回一个布尔值，表示某个数组是否包含给定的值,和字符串的<code>includes()</code>方法类似</p>
</blockquote>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Array.from()</span>
<span class="token keyword">let</span> arrayLike <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'0'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>
    <span class="token string">'1'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span>
    <span class="token string">'2'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>
    length<span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['a', 'b', 'c']</span>

<span class="token comment" spellcheck="true">//Array.find()  参数有[值]，[下标]，[数组]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// -5</span>

<span class="token comment" spellcheck="true">//Array.findIndex()</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> value <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 2</span>

<span class="token comment" spellcheck="true">//Array.includes()</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="for-of"><a href="#for-of" class="headerlink" title="for-of"></a>for-of</h2><blockquote>
<p>Array, Map, Set, String, TypedArray，arguments 对象等等<br>不能遍历普通对象<br><code>for-in</code>遍历所有可枚举的属性, 不推荐用来遍历数组，防止迭代次序出错<br><code>for-of</code>遍历可迭代对象的属性值</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Array"</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//0,1,2,3,4,name</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//1,2,5,9,2</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"whs"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//name,age  </span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//Uncaught TypeError</span>

<span class="token comment" spellcheck="true">//遍历NodeList对象</span>
<span class="token keyword">let</span> nodeList<span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"article > p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> node <span class="token keyword">of</span> nodeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  node<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"read"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一弹结束。更重要的箭头函数，class留下一弹吧</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初2-3」李さんは　毎日　コービーな　のみます]]></title>
      <url>http://cheesekun.top/2017/03/25/cheesekun.top/ch1018/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>を茶（おちゃ）　茶　</li>
<li>パン　　面包</li>
<li>ケーキ　　蛋糕</li>
<li>うどん　　面条</li>
<li>卵（たまご）　　蛋</li>
<li><strong>チーズ　　芝士</strong></li>
<li>リンゴ（林檎）　苹果　　　　椎名林檎 [^1]</li>
<li>手紙（てがみ）　　信</li>
<li>音楽（おんがく）　　音乐</li>
<li>映画（えいが）　　电影</li>
<li>昼ご飯（ひるごはん）　　午饭<blockquote>
<p>其中的[ ご ]是一种文雅的说法。也可以说：昼食（ちゅうしょく）<br>明日（あした）の昼ご飯は何を食（た）べますか　　-&gt;明天午饭吃什么?</p>
</blockquote>
</li>
<li>飲みます（のみます）　　喝<blockquote>
<p><strong>中文的“吃药”在日语表达为“喝药”</strong><br>薬を（くすりを）飲みます　　吃药<br>子供が（こどもが）乳（ちち）を飲みます　　孩子吃奶</p>
</blockquote>
</li>
<li>買います（かいます）　　买<blockquote>
<p>本屋（ほんや）で本を買います　　-&gt;在书店买书</p>
</blockquote>
</li>
<li>撮ります（とります）　　拍摄<blockquote>
<p>カメラマン（camera man）は写真（しゃしん）を撮ります　　-&gt; 摄影师拍照</p>
</blockquote>
</li>
<li>書きます（かきます）　　写<blockquote>
<p>即表示写，也表示画( 同「絵」え)<br>手紙（てがみ）を書きます　　写信<br>絵（え）/漫画　書きます　　画 画漫画</p>
</blockquote>
</li>
<li>読みます（よみます）　　读<blockquote>
<p>可以是出声的朗读，也可以是理解意思的阅读（<strong>单纯的看要用「見ます」（みます）</strong>）<br>主人（しゅじん）と一緒に（いっしょに）娘の手紙を読みます　　-&gt; 和丈夫一起看女儿的信<br>物語（ものがたり）を読みます　　念故事</p>
</blockquote>
</li>
<li>聞きます（ききます）　　听<blockquote>
<p>听声音，也可以解释为：提问<br>父は毎朝ラジオを聞きます　　-&gt; 爸爸每天早上听音乐</p>
<blockquote>
<p>动宾关系使用「を」</p>
</blockquote>
</blockquote>
</li>
<li>食べます（たべます）　　吃<blockquote>
<p>私は一日中何も食べませんでした　　-&gt;我一天什么也没吃</p>
</blockquote>
</li>
<li>見ます（みます）　　看<blockquote>
<p>看（电影），书。。【看朋友】之类不可以使用<br>夜は家でテレビを見ます　　-&gt;我今晚在家看电视【夜は    强调夜】</p>
</blockquote>
</li>
<li>します　　做，干（相当于 do）<blockquote>
<p>【动作类名词+します】直接变为动词<br>【所有体育项目+をします】　变为动作<br>如: 勉強（学习）是个动作性名词，勉強します 则变成一个动词<br>日曜日何をしますか　　-&gt; 周日你做什么？<br>李さんは図書館で勉強します　　-&gt; 小李在图书馆学习</p>
</blockquote>
</li>
<li>これから　　[副]从现在起,今后<blockquote>
<p>表示将来，多跟动词的ます　或者　名词的です<br>これからあなたは大学生です　　-&gt;从现在起，你就是大学生了<br>これから二年後　　-&gt;从现在开始两年后<br>君たちはこれからですよ　　-&gt;你们的好日子还在后头呢</p>
</blockquote>
</li>
<li>じゃあ（口语）/では（正式）　　「连」那么<blockquote>
<p>也可以表示离别时的寒暄<br>じゃあ、課長、失礼します　　-&gt;那么科长，我先走了<br>では、また明日電話をします　　-&gt;那么，明天再打电话给你</p>
<blockquote>
<p>また　又，再 的意思</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>名を动　　做…（某事）</p>
<blockquote>
<p>区分可否接宾语小办法</p>
<blockquote>
<p>“他在吃”，不接宾语语义不明，是[他动词]用「を」来提示<br>“他在睡觉”，不需要接宾语语义明确，是[自动词]</p>
</blockquote>
<p>提问宾语通常用　何「なに」<br>李さんは毎朝（まいあさ）何を食べますか　-&gt; 小李每天早晨吃什么?<br>私は今日本を買い（かい）ました　-&gt;我今天买了书。</p>
</blockquote>
</li>
<li>名[场所]で动　　在…做…<blockquote>
<p>助词　で 提示场所<br>私はコンビニでお弁当（おべんとう）を買います　　-&gt; 我在便利店买盒饭<br>今日どこで新聞（しんぶん）を読みますか　　-&gt; 今天，你在哪里看报纸了?</p>
</blockquote>
</li>
<li>名か名  …或…<blockquote>
<p>二选一或多选一<br>A：君は今日か明日休みますか　　-&gt;你今天或者明天休息吗?<br>B：私は今日休みます　　-&gt; 我今天休息<br>友達か弟（おとうと）と一緒に映画（えいが）を見ます　　-&gt; 和朋友或弟弟看电影</p>
</blockquote>
</li>
<li>名をください　　请给我…<blockquote>
<p>商品给自己看一下或者买下，也可用于点餐<br>对于长辈，是不可以使用这个动词的<br>この本をください　　-&gt; 我买这本书。<br>李さん、その雑誌をください　　-&gt;小李，请把那本杂志给我</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java容器---集合]]></title>
      <url>http://cheesekun.top/2017/03/24/cheesekun.top/ch1017/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学过js的我们知道，js的数组没有固定长度，可以随意删除插入数据。<br>但是在java里，数组是预先设定好长度的，也就是说，java数组不能直接移除添加数据。<br><del>随意的js在这一点上还挺方便的</del><br>因此java创造了一个叫<em>集合</em>的容器用来代替数组，它可以随意添加删除数据，并且还可以<strong>指定位置</strong>。</p>
<h2 id="集合的类型"><a href="#集合的类型" class="headerlink" title="集合的类型"></a>集合的类型</h2><ul>
<li>两大接口:Collection    Map</li>
<li>Collection子接口<ul>
<li>List（序列）<blockquote>
<p>排列有序，可以重复</p>
<blockquote>
<p>ArrayList（数组序列）<br>LinkedList（链表）</p>
</blockquote>
</blockquote>
</li>
<li>Queue（队列）<blockquote>
<p>排列有序，可以重复</p>
<blockquote>
<p>LinkedList（链表）</p>
</blockquote>
</blockquote>
</li>
<li>Set（集）<blockquote>
<p>无序，不可重复</p>
<blockquote>
<p>HashSet（哈希集）</p>
</blockquote>
</blockquote>
</li>
</ul>
</li>
<li>Map子接口（以键值对key-&gt;value映射）<blockquote>
<p>HashMap（哈希表）</p>
</blockquote>
</li>
</ul>
<p><img src="http://old5ohki5.bkt.clouddn.com/java-container.png" alt=""></p>
<h2 id="常用方法（以ArrayList，HashMap举例，增删改查）"><a href="#常用方法（以ArrayList，HashMap举例，增删改查）" class="headerlink" title="常用方法（以ArrayList，HashMap举例，增删改查）"></a>常用方法（以ArrayList，HashMap举例，增删改查）</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>（把Course【课程信息】添加到List中）</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// &lt;Course>泛型，指定Course类型插入courseToSelect，</span>
<span class="token comment" spellcheck="true">// 错误数据插入时，在编译过程就会报错</span>
<span class="token comment" spellcheck="true">// 并且无需类型强转</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Course<span class="token operator">></span> coursesToSelect<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">ListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>coursesToSelect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Course</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String id<span class="token punctuation">;</span>    
    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    
    <span class="token keyword">public</span> <span class="token function">Course</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id <span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>给ArrayList添加数据（add, addAll）</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个课程对象，并通过调用add方法，添加到备选课程List中</span>
Course cr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token string">"1"</span> <span class="token punctuation">,</span> <span class="token string">"数据结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
coursesToSelect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入cr1</span>

Course cr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"C语言"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
coursesToSelect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> cr2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将cr2出入到集合第0位</span>

<span class="token comment" spellcheck="true">//Arrays.asList(course2),把数组转化为Collection对象。。相应的有 Collection.toArray() 方法</span>
Course<span class="token punctuation">[</span><span class="token punctuation">]</span> course <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"离散数学"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"汇编语言"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
coursesToSelect<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入数组对象</span>

Course<span class="token punctuation">[</span><span class="token punctuation">]</span> course2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"高等数学"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"大学英语"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
coursesToSelect<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>course2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在2位置插入数组对象</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>删除ArrayList中元素（remove, removeAll）</p>
<pre class="line-numbers language-java"><code class="language-java">coursesToSelect<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除 0 位置的数据</span>

Course<span class="token punctuation">[</span><span class="token punctuation">]</span> courses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>Course<span class="token punctuation">)</span> coursesToSelect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Course<span class="token punctuation">)</span> coursesToSelect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
coursesToSelect<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>courses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除 4，5 位置的数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>修改ArrayList中的元素（set）<pre class="line-numbers language-java"><code class="language-java">coursesToSelect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Course</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"毛概"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//修改4位置的数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>查找ArrayList中的元素（get）<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//所有对象存入集合后，都变成Object类型，取出时需要类型强转（在没有设置泛型的情况下）</span>
Course temp <span class="token operator">=</span> <span class="token punctuation">(</span>Course<span class="token punctuation">)</span> coursesToSelect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//取出第0位对象</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>通过迭代器来遍历ArrayList</p>
<blockquote>
<p>迭代器(Iterator)本身是一个接口，所有集合都实现了这个接口方法<br>迭代器的下标是从 -1 开始的</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//通过集合的iterator方法，取得迭代器的实例</span>
  Iterator it <span class="token operator">=</span> coursesToSelect<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有如下课程待选(通过迭代器访问)："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Course cr <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"课程："</span> <span class="token operator">+</span> cr<span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> cr<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>（将Student【id: name】添加到students中）</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Student<span class="token operator">></span> students<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">MapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>students <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Student<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String id<span class="token punctuation">;</span>    
    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    
    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Course<span class="token operator">></span> courses<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>courses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Course<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>给HashMap添加数据（put）<pre class="line-numbers language-java"><code class="language-java">Student newStudent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"001"</span><span class="token punctuation">,</span> <span class="token string">"芝士君"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
students<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> newStudent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>删除HashMap中元素（remove）<pre class="line-numbers language-java"><code class="language-java">students<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//移除key为"0"的元素</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>修改HashMap中的元素（set）<pre class="line-numbers language-java"><code class="language-java">Student newStudent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"002"</span><span class="token punctuation">,</span> <span class="token string">"不是芝士君"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
students<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> newStudent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将替换key为"0"的数据</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>查找HashMap中的元素（get）<pre class="line-numbers language-java"><code class="language-java">Student st <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>获取HashMap所有key的集合并遍历HashMap（keySet）<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 通过keySet方法，返回Map中的所有“键”的Set集合</span>
  Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 取得students的容量</span>
  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总共有："</span> <span class="token operator">+</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"个学生！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 遍历keySet，取得每一个键，再调用get方法取得每个键对应的value</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>String stuId <span class="token operator">:</span> keySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Student st <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stuId<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">!=</span> null<span class="token punctuation">)</span>
          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生："</span> <span class="token operator">+</span> st<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="例子下载"><a href="#例子下载" class="headerlink" title="例子下载"></a>例子下载</h2><blockquote>
<p><a href="http://img.mukewang.com/down/5419379b0001d08f00000000.rar" target="_blank" rel="external">ArrayList</a><br><a href="http://img.mukewang.com/down/54193863000156ac00000000.rar" target="_blank" rel="external">HashMap</a></p>
</blockquote>
<p>本节总结是从慕课网上看视频整理的: <a href="http://www.imooc.com/learn/110" target="_blank" rel="external">传送门</a></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实这玩意查api文档就行了<br>整理起来也是因为懒得去翻吧hhh</p>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 后台 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初2-2」吉田さんは　来月　中国へ　行きます]]></title>
      <url>http://cheesekun.top/2017/03/22/cheesekun.top/ch1016/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>来月（らいげつ）　下个月</li>
<li>飛行機（ひこうき）　飞机</li>
<li>友達（ともだち）　朋友</li>
<li>弟（おとうと）　　弟弟</li>
<li>誕生日（たんじょうび）　　生日<blockquote>
<p>他人生日前要加 [お]<br>お誕生日おめでとうございます。　-&gt; 生日快乐</p>
</blockquote>
</li>
<li>夏休み（なつやすみ）　暑假<blockquote>
<p>在日本一般为一个半月<br>夏休みはいつからいつまでですか　-&gt; 暑假从什么时候到什么时候？</p>
</blockquote>
</li>
<li>交通機関（こうつうきかん）　 交通工具<blockquote>
<p>表示交通机关，交通工具<br>交通機関が混乱（こんらん）します　　-&gt;交通机关处于混乱状态</p>
</blockquote>
</li>
<li>行きます（いきます）　　去<blockquote>
<p>表示[到…去]，奔赴…<br>表示移动方向或目的地的名词身后要加「へ」<br>社長（しゃちょう）は東京へ行きました　　　-&gt; 社长去东京了</p>
</blockquote>
</li>
<li>帰ります（かえります）　　回来<blockquote>
<p>表示回去，返回<br>前面省略地点时，通常表示回家<br>小野さんは友だちと帰りました　　-&gt; 小野女士和朋友回来了<br>何時に帰りましたか　　-&gt; 几点回去的?</p>
</blockquote>
</li>
<li>来ます（きます）　来<blockquote>
<p>表示 过来，来某地<br>李さんは先月北京から来ました　　-&gt; 小李上个月从北京来了<br>あの方（かた）はどこから来ましたか　-&gt; 那个人是从哪来的?</p>
</blockquote>
</li>
<li>確かに（たしか）　　好像是<blockquote>
<p>好像是，大概<br>另一个释义　確かに　的确<br>A：あの人は誰ですか　　-&gt; 那个人是谁?<br>B：確か李さんの会社の人です　　-&gt; 我记得好像是小李他们公司的人<br>彼は確か１月10日に日本へ行きました　　-&gt;他大概是1月10号到日本的</p>
</blockquote>
</li>
<li>まっすぐ　「副」径直，笔直<blockquote>
<p>表示径直的直线，直接去某地，或者是人的性格刚正不阿<br>今日はまっすぐ帰ります　　-&gt; 今天直接回去<br>この道（みち）をまっすぐ行くと学校があります　　-&gt; 顺这这条道一直走，就有所学校</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>名【场所】へ动　　去/来/回…（某处）<blockquote>
<p>组词「へ」读作 「e」,用来提示移动行为的目的地<br>对地点进行提问时，使用「どこへ」<br>A：李さんはどこへ行きましたか　　-&gt; 小李去哪了?<br>B：李さんは中国へ行きました　　-&gt;小李去了中国</p>
</blockquote>
</li>
<li>名【场所】から动　　来自…（某处）<blockquote>
<p>助词「から」表示移动行为的起点<br>A：君はどこから来（き）ましたか　　-&gt;你从哪里来<br>B：私は北京から来ました　　-&gt; 我从北京来</p>
</blockquote>
</li>
<li>名【人】と动　　和…（某人）做…<blockquote>
<p>表示某人和句中的主语共同完成某事<br>如果都是主语，要使用 「AとBは」<br>如 A 是主语，要使用 「AはBと」<br>李さんは誰と日本へ来ましたか　　-&gt; 小李和谁一起来日本的?</p>
</blockquote>
</li>
<li>名【交通工具】で动　　乘坐…来/去/回…（某处）<blockquote>
<p>组词「で」,用来提示移动行为的交通手段<br>步行 使用 「歩いて」<br>对交通工具进行提问时，使用疑问词「何」<br>A：毎日（まいにち）何で家へ来ますか　　-&gt;你每天怎么回家<br>B：私はバス（bus）で家へ帰り（かえり）ます　　-&gt; 我乘巴士回家</p>
</blockquote>
</li>
<li>名【场所】から名【场所】まで【动】　　从…(场所)到..(场所)<blockquote>
<p>A：東京から京都まで何で行きましたか　　-&gt;你坐什么从东京到京都?<br>B：新幹線で行きました　　-&gt;坐新干线。</p>
</blockquote>
</li>
<li><p>に　/で　/へ　/から　/ます　/と　＋　は　　表示对比</p>
<blockquote>
<p>「原有助词+ は」, 叠加表示对比强调<br>私の部屋には電話（でんわ）ありません　　-&gt; 我的房间没有电话</p>
<blockquote>
<p>部屋に　后面+ は，强调房间没有</p>
</blockquote>
<p>私は昨日（きのう）会社へ行きました。今日は会社へ行きません　　-&gt; 我昨天去过公司了。今天是不去公司的。</p>
<blockquote>
<p>（今日　＋は）</p>
</blockquote>
<p>机の下には猫がいます　　-&gt;桌子底下有只猫  </p>
<blockquote>
<p>（に＋は、在地点加强语气，表示和平常不一样） </p>
</blockquote>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无框架版TodoList]]></title>
      <url>http://cheesekun.top/2017/03/21/cheesekun.top/ch1015/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>花了两天终于撸完todolist这个玩意了，<br>效果看:<a href="http://cheesekun.top/todolist/">TodoList</a><br>感觉学习到和意识到一些东西</p>
<h2 id="前前言"><a href="#前前言" class="headerlink" title="前前言"></a>前前言</h2><p>身为个前端萌新，很多时候都不知道拿什么练手<br>而很多时候，大多数人都推荐做个TodoList<br>网上大部分人做的例子都是使用了各种框架各种库<br>作为打基础，还是手撸个原生的TodoList比较好<br>(其实是不会用框架，😱)</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul>
<li><code>localStorage</code>存储获取task数据</li>
<li><code>JSONP()</code>跨域获取api数据</li>
<li><code>Animate</code>CSS3小动画</li>
<li>字体图标的使用</li>
<li><del>contenteditable</del></li>
</ul>
<h2 id="localStorage存储获取task"><a href="#localStorage存储获取task" class="headerlink" title="localStorage存储获取task"></a>localStorage存储获取task</h2><p>这个使用到上次我发的那个<code>localStorage</code>来操纵数据<br>不了解的先跳转: <a href="http://cheesekun.top/2017/03/13/cheesekun.top/ch1010/">localStorage</a></p>
<blockquote>
<p>fench()函数先获取浏览器上”todolist”的数据，若没有，就用todos作为数组存储数据并转化为json<br>save()函数将获取到数据转化为json字符串，在存入到STORAGE_KEY中</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> STORAGE_KEY <span class="token operator">=</span> <span class="token string">"todolist"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> todoStorage <span class="token operator">=</span> <span class="token punctuation">{</span>
  fetch<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> todos <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>STORAGE_KEY<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'[]'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> todos<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  save<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>STORAGE_KEY<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>todos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> todos <span class="token operator">=</span> todoStorage<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="JSONP跨域获取api数据"><a href="#JSONP跨域获取api数据" class="headerlink" title="JSONP跨域获取api数据"></a>JSONP跨域获取api数据</h2><p>这个我之前也总结过一篇<br>具体见<a href="http://cheesekun.top/2017/03/19/cheesekun.top/ch1014/">getJSONP跨域</a><br>这里面使用到一个天气api和一个地图api</p>
<h2 id="CSS3小动画"><a href="#CSS3小动画" class="headerlink" title="CSS3小动画"></a>CSS3小动画</h2><p>很少使用css3动画，不过一旦使用效果拔群，至少有点小动画，整体页面也不会特别单调<br>不过兼容性还是需要解决的</p>
<blockquote>
<p>先建一个动画帧<br>再将帧名加入<code>animate</code>参数中<br><code>animation: name duration timing-function delay iteration-count direction play-state;</code><br>分别为 帧名，动画完成时间，运动周期曲线，延迟时间，执行次数，是否往返播放动画，暂停或运行</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> swing</span> <span class="token punctuation">{</span>
  <span class="token selector">20% </span><span class="token punctuation">{</span>
    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">15</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">15</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">40% </span><span class="token punctuation">{</span>
    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, -<span class="token number">10</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, -<span class="token number">10</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">60% </span><span class="token punctuation">{</span>
    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">80% </span><span class="token punctuation">{</span>
    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, -<span class="token number">5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, -<span class="token number">5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">to </span><span class="token punctuation">{</span>
    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> rotate<span class="token number">3</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token property">animation</span><span class="token punctuation">:</span> swing <span class="token number">5</span>s infinite<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>和使用外部字体差不多<br>使用了:before, 显示如： 😃按钮</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'字体名'</span><span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url('字体链接')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'字体格式后缀'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.btn</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'字体名'</span><span class="token punctuation">;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\e00f"</span><span class="token punctuation">;</span>   //图标码
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h2><p>一个神奇的属性<br><code>&lt;p contenteditable&gt;123&lt;p&gt;</code><br>添加到文本标签上居然就可以在页面上编辑 p标签了，突然了解到，不过我在todolist里面并没有使用它</p>
<h2 id="就在刚刚"><a href="#就在刚刚" class="headerlink" title="就在刚刚"></a>就在刚刚</h2><p>发现数组居然是json的一种，一直以为像对象这种键值对的存在才是json<br>没想到维基百科说数组也是</p>
<blockquote>
<p>值的有序列表（Array）：一个或者多个值用,分区后，使用[，]括起来就形成了这样的列表，形如：<br>[collection, collection]</p>
</blockquote>
<p>具体看维基百科对JSON的定义L: <a href="https://zh.wikipedia.org/wiki/JSON#WEB.E5.BC.80.E5.8F.91" target="_blank" rel="external">JSON</a></p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>一开始只是想不使用任何的框架和库来做个TodoList<br>不过在做的过程中想添加个天气预报，添加个随机语句，添加个css动画<br>都可以拓展出很多自己很少或者未曾去了解的知识<br>而且学习起来更有趣<br>之前有花了一段时间去了解的vue，es6类似的新知识，但是没使用到，渐渐地就遗忘了<br>十分消耗时间成本<br>发现去寻找制作一个东西，再在此基础上进行新的拓展，比起刻意去学习新知识，获益更多</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>虽然没有使用封装，闭包，原型之类的知识，但是效果能实现已经是很大的勉励了<br>说到底就是自己太水了，继续加油</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> todolist </tag>
            
            <tag> API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSONP跨域访问]]></title>
      <url>http://cheesekun.top/2017/03/19/cheesekun.top/ch1014/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天在写一个只使用原生js的一个todolist小玩意，然后想给它添加个当地天气的小功能，<br>没想到引发我的一堆基础不牢靠</p>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><p>首先，我是想使用ajax的GET方法获取天气api的数据（以前使用jq获取过），可是怎么也获取不了，<br>并且<code>request.status === 0</code>,此时的我很懵逼，一直看过404，200，304，500啥的，就没看过0.<br>后来google一下，发现是跨域问题。以前也听说过跨域，但一直没去深究，并且以前使用ajax也是调用本地数据，<br>所以一直都不怎么了解。先来看看什么是跨域。。</p>
<ul>
<li>概念<blockquote>
<p>只要协议、域名、端口有任何一个不同，都被当作是不同的域。<br>对于端口和协议的不同，只能通过后台来解决。</p>
</blockquote>
</li>
<li>具体来说</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">URL</th>
<th style="text-align:center">说明</th>
<th style="text-align:right">是否允许通信                           </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:center">同一域名下</td>
<td style="text-align:right">允许                      </td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/lab/a.js" target="_blank" rel="external">http://www.a.com/lab/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/script/b.js" target="_blank" rel="external">http://www.a.com/script/b.js</a></td>
<td style="text-align:center">同一域名下不同文件夹</td>
<td style="text-align:right">允许                    </td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com:8000/a.js" target="_blank" rel="external">http://www.a.com:8000/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:center">同一域名，不同端口</td>
<td style="text-align:right">不允许 </td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.a.com/b.js" target="_blank" rel="external">https://www.a.com/b.js</a></td>
<td style="text-align:center">同一域名，不同协议</td>
<td style="text-align:right">不允许                        </td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="http://70.32.92.74/b.js" target="_blank" rel="external">http://70.32.92.74/b.js</a></td>
<td style="text-align:center">域名和域名对应ip</td>
<td style="text-align:right">不允许  </td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="http://script.a.com/b.js" target="_blank" rel="external">http://script.a.com/b.js</a></td>
<td style="text-align:center">主域相同，子域不同</td>
<td style="text-align:right">不允许    </td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/a.js" target="_blank" rel="external">http://www.a.com/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="http://a.com/b.js" target="_blank" rel="external">http://a.com/b.js</a></td>
<td style="text-align:center">同一域名，不同二级域名（同上)</td>
<td style="text-align:right">不允许（cookie这种情况下也不允许访问）</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.cnblogs.com/a.js" target="_blank" rel="external">http://www.cnblogs.com/a.js</a></td>
<td style="text-align:center"></td>
<td style="text-align:right"></td>
</tr>
<tr>
<td style="text-align:left"><a href="http://www.a.com/b.js" target="_blank" rel="external">http://www.a.com/b.js</a></td>
<td style="text-align:center">不同域名</td>
<td style="text-align:right">不允许  </td>
</tr>
</tbody>
</table>
<p>所以说，一旦跨域了，就无法使用ajax来请求其他网站提供的数据(如天气api，快递api)。<br>因为以前使用了jq的<code>getJSON</code>，因为它已经封装好，所以没有意识到跨域问题<br>具体怎么使用jq跨域，看我以前写的一个<a href="http://cheesekun.top/fcc/weather/">天气预报</a>小demo</p>
<h2 id="为何浏览器不支持跨域访问"><a href="#为何浏览器不支持跨域访问" class="headerlink" title="为何浏览器不支持跨域访问"></a>为何浏览器不支持跨域访问</h2><p>因为浏览器实现的同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，所以AJAX是不允许跨域的<br>举个例子，如果我在我的页面上使用<code>&lt;iframe&gt;</code>标签嵌一个银行页面，而你在我当前页面登陆那个嵌套的银行页面，在没有同源策略限制下，<br>我就可以通过js读取到你输入的银行密码和登录名，这样你就gg了。</p>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>虽然ajax不支持跨域访问，但是像<code>&lt;script&gt;</code>,<code>&lt;link&gt;</code>,<code>&lt;img&gt;</code>,<code>&lt;iframe&gt;</code>这些标签是允许跨域的，<br>你应该有使用过<code>&lt;link&gt;</code>调用过外部的css，或者<code>&lt;script&gt;</code>调用过外部的js文件。<br>所以JSONP就利用了这点来实现跨域访问<br>但是我不想使用jq，毕竟jq能解决的js爸爸也肯定能解决，所以我就来了解原生的jsonp</p>
<ul>
<li>jsonp介绍<blockquote>
<p>全称 JSON with Padding，用于解决AJAX跨域问题的一种方案</p>
</blockquote>
</li>
<li>jsonp原理<blockquote>
<p>利用<code>&lt;script&gt;</code>标签获取到api数据，再把数据传给回调函数进行操作</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    <span class="token keyword">function</span> <span class="token function">dosomething</span><span class="token punctuation">(</span>jsondata<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//处理获得的json数据</span>
    <span class="token punctuation">}</span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
 <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"http://a.com/data.php?callback=dosomething"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>JSONP小贴士<blockquote>
<p>js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入。<br>所以JSONP是需要服务器端的页面进行相应的配合的。<br>例如<code>&lt;script src=&quot;http://a.com/data.php?callback=dosomething&amp;name=芝士君&amp;sex=man&gt;&lt;/script&gt;</code><br>我们传入的<code>name</code>和<code>sex</code>,服务器接收到该数值，要做出相应的反应，回馈相应数据</p>
</blockquote>
</li>
<li>JSONP优缺点<blockquote>
<p>优: 兼容性非常好，其原理决定了即便在非常古老的浏览器上也能够很好的被实现。<br>缺: 只能 GET 不能 POST，存在xss脚本注入的安全隐患</p>
</blockquote>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>实现JSONP的人真机智，感觉就像那些钻法律空子的人。hhh贬义的比喻褒义地夸</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> ajax </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初2-1」森さんは　7時に　起きます]]></title>
      <url>http://cheesekun.top/2017/03/16/cheesekun.top/ch1013/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>今（いま）　现在</li>
<li>昨日（きのう）　昨天</li>
<li>明日（あした）　明天</li>
<li>あさって　　后天</li>
<li>毎日（まいにち）　每天</li>
<li>夜（よる）　晚上</li>
<li>朝（あさ）　早上</li>
<li>遅刻（ちこく）　迟到</li>
<li>旅行（りょこう）　旅行</li>
<li>試験（しけん）　考试</li>
<li>始まります（はじまります）　</li>
<li>終わります（おわります）　</li>
<li>起きます（おきます）　</li>
<li>試験（しけん）　考试<blockquote>
<p>一般指学校的考试。也可以指实验，化验<br>面接試験　　-&gt; 面试</p>
</blockquote>
</li>
<li>仕事（しごと）　[名]工作<blockquote>
<p>仕事は何時におわりますか　　-&gt; 工作几点结束?<br>-　出張（しゅっちょう）　出差<br>今月（こんげつ）中国へ出張します　-&gt; 这个月去中国出差</p>
</blockquote>
</li>
<li>研修（けんしゅう）　进修<blockquote>
<p>在某个领域专研，研究<br>言語（げんご）研修センター(center)　-&gt; 语言研究中心</p>
</blockquote>
</li>
<li>お宅（おたく）　府上，(您)家<blockquote>
<p>非常尊敬的说法。也表示御宅族<br>先生のおたくはどちらですか　-&gt; 老师您家在哪</p>
</blockquote>
</li>
<li>休みます（やすみます）　休息<blockquote>
<p>休息。还有睡觉，放假的意思<br>少し（すこし）休みましよ　-&gt; 休息一下</p>
</blockquote>
</li>
<li>働きます（はたらきます）　[动]工作<blockquote>
<p>お父さんは朝から晩まではたらきます　-&gt; 父亲从早到晚工作</p>
</blockquote>
</li>
<li>寝ます（ねます）　睡觉<blockquote>
<p>毎晩9時に寝ます　-&gt; 每晚九点睡觉</p>
</blockquote>
</li>
<li>勉強します（べんきょうします）　学习<blockquote>
<p>学习，用功，也可以解释为 知识，见识<br>勉強部屋　-&gt; 学习室<br>試験勉強　-&gt; 考前复习<br>あの人は一生懸命（いっしょうけんめい）に勉強します　-&gt; 那个人努力学习<br>今日は（きょうは）いい勉強になりました。　-&gt; 今天学到了不少东西</p>
</blockquote>
</li>
<li>いつも　「副」总是<blockquote>
<p>いつも夜勉強します　-&gt; 总是晚上学习</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>今～時～分です　　现在…点…分。<blockquote>
<p>现在具体时间的表示。在具体时间前加范围[午前/午后/朝/夜]<br>A：今何時ですか　-&gt; 现在几点了<br>B：今午前8時半です　-&gt; 现在是上午八点半<br>A：森さんの会社は8時に始まりますか　-&gt; 森先生的公司八点开始上班吗?<br>B：はい、8時に始まります　-&gt; 是的，八点开始上班</p>
</blockquote>
</li>
<li>现在/将来 肯定「～ます」/否定「～ません」<blockquote>
<p>森さんは毎日働きます　-&gt; 森先生每天上班<br>森さんわ明日（あした）休みません　森先生明天不休息</p>
</blockquote>
</li>
<li>过去 肯定「～ましだ」/否定「～ませんでした」<blockquote>
<p>森さんは先週（せんしゅ）休みました　-&gt; 森先生上周休息<br>私は昨日はたらきませんでした　-&gt; 我昨天没工作</p>
</blockquote>
</li>
<li>名[时间]に动　　在…（时候）做…<blockquote>
<p>有具体时间时用「に」，如「10時、日曜日、2016年」<br>不具体的时间不接「に」,如「今日、毎日、先月」<br>学校は8時半に始まります　-&gt; 学校八点半开始上课<br>私は明日（あした）休みます　　-&gt; 我明天休息    </p>
</blockquote>
</li>
<li>名【时间】から名【时间】まで【动】　　从…(时间)到..(时候)<blockquote>
<p>可以接表示时间的名词，也可以接地点名词<br>私は9時から5時まで働きます　　-&gt; 我9点到5点工作<br>仕事（しごと）は５時まで終わります　　-&gt; 工作到下午5点</p>
</blockquote>
</li>
<li>いつ「动」ますか　　什么时候做…？<blockquote>
<p>「何時」的话，要回答几点 　what time<br>「いつ」的话,可以回复各种时间  　when<br>試験はいつ始まりますか　　-&gt; 考试什么时候开始<br>来週の木曜日です　　-&gt; 下周四开始</p>
</blockquote>
</li>
<li>は【对比】<blockquote>
<p>除了提示主语，还可以表示对比<br>森さんは今日は休みます　　-&gt; 小野女士今天休息</p>
<blockquote>
<p>表示小野女士跟往常不同，今天休息</p>
</blockquote>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[突然失落]]></title>
      <url>http://cheesekun.top/2017/03/15/cheesekun.top/ch1012/</url>
      <content type="html"><![CDATA[<p>突然失落<br>突然低沉<br>突然只想躺着<br>一动不动<br>把什么都放空</p>
<p>97的大孩子<br>再过几个月20<br>想了好多好多<br>感觉什么都没做<br>但是好累</p>
<p>好像知道想要什么<br>也一直恐惧害怕着<br>好像有付出过什么<br>好像什么都没得到过</p>
<p>突然低迷<br>突然难过<br>找不到人倾诉这些<br>听起来很中二，很颓唐的话</p>
<p>就写下来吧<br>谁会看到<br>20不到的人生<br>2017.3.15 很茫<br>2027的此时，又有何想。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=33469232&auto=0&height=66"></iframe>

]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java实现图片水印]]></title>
      <url>http://cheesekun.top/2017/03/14/cheesekun.top/ch1011/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个星期一一言不合轮到我们小组做java的小知识点介绍，要录个几分钟的视频，<br>啊。。。一直没看java，一言不合就要录视频尼玛。<br>刚好之前想用前端弄个网页p图，<br>所以这次视频就讲下怎么用简单地用java给图片添加水印吧。。。。。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>先new个File对象来获取图片</li>
<li>使用ImageIO对象的read方法读取图片数据</li>
<li>再创建一个BufferedImage对象来，用来放置图片，我把它当作一个相框来看</li>
<li>调用createGraphics方法，会返回一个Graphics2D对象，可用于图像操作，也就是对相框进行图像操作(该对象有很多对图像进行操作的方法，如放大缩小旋转)</li>
<li>使用该对象的drawImage()方法将图片放置于其中</li>
<li>到这一部我们就把图片放在相框中了，后面添加上水印也就是把水印图片添加到相框的相对位置上而已，不过多了一步将水印图片进行半透明化</li>
<li>然后以相同的方法放透明化水印图片到相框</li>
<li>添加后我们要用dispose释放内存</li>
<li>最后write方法输出已经打上水印的图片到指定路径<blockquote>
<p>读图片-&gt;建容器-&gt;放图片-&gt;放水印-&gt;释放内存-&gt;写出图片</p>
</blockquote>
</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> mark<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>AlphaComposite<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Graphics2D<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>Image<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>image<span class="token punctuation">.</span>BufferedImage<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddMark</span> <span class="token punctuation">{</span>  

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">pressImage</span><span class="token punctuation">(</span>String backImg<span class="token punctuation">,</span> String markImg<span class="token punctuation">,</span>  
            String destImageFile<span class="token punctuation">,</span> <span class="token keyword">int</span> x <span class="token punctuation">,</span><span class="token keyword">int</span> y <span class="token punctuation">,</span> <span class="token keyword">float</span> alpha<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            File img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>backImg<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            Image src <span class="token operator">=</span> ImageIO<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token keyword">int</span> width <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//接口对象参数，没有就写null</span>
            <span class="token keyword">int</span> height <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">//TYPE_INT_RGB常量是把底图设置为没有透明通道的图片，也就是说如果图片是半透明图片的话，会被透明部分会被填充</span>
            BufferedImage image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>  

            Graphics2D g <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//再创建一个Graphics2D对象，可以对图片图形或者颜色之类进行操作，相当于有一支画笔</span>

            <span class="token comment" spellcheck="true">//将原图放进相框中,0,0表示图片偏移相框x轴0px，y轴0px,也就是说原图相对相框位置不改变</span>
            <span class="token comment" spellcheck="true">//null用于在构造 Image 时，接收有关 Image 信息通知的异步更新接口，没有就写null</span>
            g<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    

            <span class="token comment" spellcheck="true">// 水印添加</span>
            Image src_mark <span class="token operator">=</span> ImageIO<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>markImg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            g<span class="token punctuation">.</span><span class="token function">setComposite</span><span class="token punctuation">(</span>AlphaComposite<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>AlphaComposite<span class="token punctuation">.</span>SRC_ATOP<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置透明度</span>
            g<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>src_mark<span class="token punctuation">,</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//水印的位置 相对相框定位</span>

            <span class="token comment" spellcheck="true">// 水印添加结束 ,释放此图形的上下文以及它使用的所有系统资源。调用 dispose 之后，就不能再使用 Graphics 对象。</span>
            g<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BufferedImage<span class="token punctuation">)</span> image<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>destImageFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将缓存的图片对象写入到指定位置</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token comment" spellcheck="true">//以相框左上角为原点，距离x轴200px; y轴800px; 透明度0.5</span>
        AddMark<span class="token punctuation">.</span><span class="token function">pressImage</span><span class="token punctuation">(</span><span class="token string">"F:/imageTest/ac.png"</span><span class="token punctuation">,</span> <span class="token string">"F:/imageTest/acLogo.png"</span><span class="token punctuation">,</span> <span class="token string">"F:/imageTest/ac111.png"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>     

<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>原图&amp;水印</p>
<blockquote>
<p>这下面是两张图，背景色一样gg (ノ<em>゜▽゜</em>)</p>
</blockquote>
<p><img src="http://oksbjk6b9.bkt.clouddn.com/ac.png" alt=""><img src="http://oksbjk6b9.bkt.clouddn.com/acLogo.png" alt=""><br>水印图<br><img src="http://oksbjk6b9.bkt.clouddn.com/ac111.png" alt=""></p>
<blockquote>
<p><code>Graphics2D</code> 也就是之前说的画笔，这个类有很多方法，如图片旋转，放大缩小，文字水印都有，查下api就可以用啦</p>
</blockquote>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>果然对java没什么好感呀。大概是因为自己太蠢了</p>
<blockquote>
<p>JAVAなんで、大嫌い</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 后台 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 水印 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web存储---Storage]]></title>
      <url>http://cheesekun.top/2017/03/13/cheesekun.top/ch1010/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>作为 Web Storage API 的接口，Storage 提供了访问特定域名下的会话存储（session storage）或本地存储（local storage）的功能，例如，可以添加、修改或删除存储的数据项。<br>如果你想要操作一个域名的会话存储（session storage），可以使用 <code>Window.sessionStorage</code>；如果想要操作一个域名的本地存储（local storage），可以使用 <code>Window.localStorage</code>。<br>— — &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FROM &nbsp;&nbsp;<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage" target="_blank" rel="external">MDN</a></p>
</blockquote>
<p>不同的浏览器是不共享Storage的<br>总之，这两个功能都是用来存储浏览器一些数据(如<strong>一些HTML5的游戏数据或者是天猫京东购物车信息之类的</strong>)，并且他们的属性和方法是一样的，除了存储时长和作用域不同:</p>
<blockquote>
<p>sessionStorage(一旦标签被关闭了，sessionStorage存储的数据也会被删除掉。不同标签页的同一个页面拥有各自的sessionStorage，数据不能共享。)<br>localStorage(长期存在，除非手动清除，并且存储在浏览器中)</p>
<blockquote>
<p>(如果是隐私浏览模式的话，会重新创建数据库存储localStorage的数据，并且在关闭浏览器时，清除所有数据)</p>
</blockquote>
</blockquote>
<p>所以只用localStorage举例就行了<br>其实localStorage相当于一个数据库，我们就以数据库的增删改查来看<br>并且<br>因为是HTNL5的新特性，所以先看浏览器支不支持先</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>！window<span class="token punctuation">.</span>localStorage<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"该浏览器不支持localstorage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>有3种方法</p>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> storage <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">;</span>
storage<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
storage<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> storage<span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> storage<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> storage<span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//string</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>由于localStorage只能存储字符串，所以当你传入非字符串类型的值时，会被转化为string类型</p>
<h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><p>同样3种方法</p>
<pre class="line-numbers language-javascript"><code class="language-javascript">storage<span class="token punctuation">.</span>a<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//"1"</span>
storage<span class="token punctuation">[</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"2" </span>
storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"3"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>其实增查的前两种方法和对象值的获取类似，不过官方推荐使用setItem()/getItem()</p>
</blockquote>
<h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><blockquote>
<p>删除某个键</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"1"</span>
 storage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//null</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>删除localStorage的所有内容</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//[object Storage] {b: "2", c: "3"}</span>
 storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//null</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><blockquote>
<p>直接对值进行修改即可</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"> storage<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
 storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="获取键名"><a href="#获取键名" class="headerlink" title="获取键名"></a>获取键名</h2><pre class="line-numbers language-javascript"><code class="language-javascript"> storage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//先清除之前的所有数据</span>
 storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"cheesekun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"name"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="json格式存储"><a href="#json格式存储" class="headerlink" title="json格式存储"></a>json格式存储</h2><p>由于storage只能存储字符串，所以我们需要先存储json字符串，<br>使用时再把json字符串转化为json对象，再获取键值</p>
<ul>
<li>json小介绍<ul>
<li>json对象<blockquote>
<p><code>var str1 = { &quot;name&quot;: &quot;cheesekun&quot;, &quot;age&quot;: 19 }</code>;<br>转化为json字符串: <code>var obj = JSON.stringify(str1);</code></p>
</blockquote>
</li>
<li>json字符串<blockquote>
<p><code>var str2 = &#39;{ &quot;name&quot;: &quot;cheesekun&quot;, &quot;age&quot;: 19 }&#39;</code>;<br>转化为json对象: <code>var obj = JSON.parse(str2);</code></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> storage<span class="token operator">=</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">;</span>
<span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'cheesekun'</span><span class="token punctuation">,</span>
  age<span class="token punctuation">:</span> <span class="token number">19</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> meStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>
storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> meStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将json字符串传入localStorage</span>
<span class="token keyword">var</span> json<span class="token operator">=</span>storage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token keyword">var</span> meObj<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将json字符串转换成为JSON对象输出</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Object { age: 19, name: "cheesekun"}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>meObj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"cheesekun"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Web-Storage-存储事件"><a href="#Web-Storage-存储事件" class="headerlink" title="Web Storage 存储事件"></a>Web Storage 存储事件</h2><p>当localStorage或者sessionStorage的数据发生变化的时候，浏览器都会在其他对该数据可见的窗口对象上触发storage事件（本窗口除外）。</p>
<p>重要：<strong>只有当存储数据真正发生变化时才会触发存储事件，比如给一个item重新设置一个和原来一样的value，或者是删除一个不存在的item是不会触发存储事件的。</strong></p>
<ul>
<li>StorageEvent的几个属性：<blockquote>
<p>key：item的key，没有则为null<br>newValue: item的新值，没有则为null<br>oldValue: item的旧值，没有则为null<br>storageArea: sessionStorage或者localStorage<br>url: 触发存储事件的脚本所在文档的url</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'storage'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>oldValue<span class="token punctuation">,</span> e<span class="token punctuation">.</span>newValue<span class="token punctuation">,</span> e<span class="token punctuation">.</span>storageArea<span class="token punctuation">,</span> e<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="localStorage小例子"><a href="#localStorage小例子" class="headerlink" title="localStorage小例子"></a>localStorage小例子</h2><blockquote>
<p>输入内容，save<br>然后刷新页面<br>surprise！！！ 它是不是还在(｡･ω･｡)ﾉ♡<br>关闭页面，再打开<br>surprise！！！ sessionStorage是不是消失了(ﾉﾟ▽ﾟ)ﾉ</p>
</blockquote>
<p><ul id="previous"></ul><div><label for="session" style="margin-left:20px;">sessionStorage： </label><input type="text" name="session" value="" id="session"></div><div><label for="local" style="margin-left:20px;">localStorage： </label><input type="text" name="local" value="" id="local" style="margin-left:21px;"></div><input type="button" id="save" value="Save storage" style="margin-left:20px;"><input type="button" id="clear" value="Clear storage" style="margin-left:20px;"></p>
<script>
  var addEvent = (function () {
      if (document.addEventListener) {
        return function (el, type, fn) {
          if (el && el.nodeName || el === window) {
            el.addEventListener(type, fn, false);
          } else if (el && el.length) {
            for (var i = 0; i < el.length; i++) {
              addEvent(el[i], type, fn);
            }
          }
        };
      } else {
        return function (el, type, fn) {
          if (el && el.nodeName || el === window) {
            el.attachEvent('on' + type, function () { return fn.call(el, window.event); });
          } else if (el && el.length) {
            for (var i = 0; i < el.length; i++) {
              addEvent(el[i], type, fn);
            }
          }
        };
      }
    })();

    function getStorage(type) {
      var storage = window[type + 'Storage'],
        delta = 0,
        li = document.createElement('li');
      if (!window[type + 'Storage']) return;

      if (storage.getItem('value')) {
        delta = ((new Date()).getTime() - (new Date()).setTime(storage.getItem('timestamp'))) / 1000;   
        li.innerHTML = type + 'Storage: ' + storage.getItem('value') + ' (存活时长: ' + delta + 's ago)';
      } else {
        li.innerHTML = type + '： 我gg了';
      }
      document.querySelector('#previous').appendChild(li);
    }

    getStorage('session');
    getStorage('local');

    addEvent(document.querySelector('#save'), 'click', function() {
      var session = document.querySelector('#session');
      var local = document.querySelector('#local');
      sessionStorage.setItem('value', session.value);
      sessionStorage.setItem('timestamp', (new Date()).getTime());
      localStorage.setItem('value', local.value);
      localStorage.setItem('timestamp', (new Date()).getTime());
      getStorage('session');
    getStorage('local');
    });  

    addEvent(document.querySelector('#clear'), 'click', function () {
      sessionStorage.clear();
      localStorage.clear();

      document.querySelector('#previous').innerHTML = '';
      getStorage('local');
      getStorage('session');
    });
</script>

<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>花了一整天研究这玩意，还有个<code>Cookie</code>没去了解，有机会再看吧</p>
<blockquote>
<p>　苦しい時でも、とにかく笑っている<br>　再难熬的日子，也要笑对人生</p>
</blockquote>
<p>参考文献: </p>
<blockquote>
<p><a href="https://aximario.github.io/2016/12/15/web-storage/?utm_source=caibaojian.com" target="_blank" rel="external">https://aximario.github.io/2016/12/15/web-storage/?utm_source=caibaojian.com</a><br><a href="http://www.cnblogs.com/st-leslie/p/5617130.html" target="_blank" rel="external">http://www.cnblogs.com/st-leslie/p/5617130.html</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/API/Storage</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> web存储 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初1-4」部屋に　机と　いすが　あります]]></title>
      <url>http://cheesekun.top/2017/03/12/cheesekun.top/ch1009/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>部屋　（へや） 　房间</li>
<li>庭　（にわ）　院子</li>
<li>居間　（いま）　起居室</li>
<li>冷蔵庫　（れいぞうこ）　电冰箱</li>
<li>壁　（かべ）　墙壁</li>
<li>猫　（ねこ）　猫</li>
<li>犬　（いぬ）　犬</li>
<li>子供　（こども）　小孩</li>
<li>女　（おんな）　女</li>
<li>生徒　（せいと）　学生</li>
<li>教室　（きょうしつ）　教室</li>
<li>公園　（こうえん）　公园</li>
<li>地下鉄　（ちかてつ）　地铁</li>
<li>木　（き）　树</li>
<li>家　（いえ）　家<blockquote>
<p>可表示房子，(自)家，或者家庭家族<br>私の家は3人です　-&gt; 我家有三口人</p>
</blockquote>
</li>
<li>眼鏡　（めがね）　眼镜<blockquote>
<p>现在一般不写汉字，而写片假名（メガネ）<br>黒（くろ）メガネ　-&gt; 墨镜</p>
</blockquote>
</li>
<li>兄弟　（きょうだい）　兄弟姐妹<blockquote>
<p>兄弟姐妹都可以使用，<span class="red">若称别人的兄弟姐妹时，则要说[ご兄弟]</span><br>A:ご兄弟がいますが　-&gt; 你有兄弟姐妹吗?<br>B:ええ、妹（いもうと）がいます　　-&gt; 有，有妹妹</p>
</blockquote>
</li>
<li>両親　（りょうしん）　 父母，双亲<blockquote>
<p>说对方父母时，要加上[ご]，ご両親<br>両親と私　　-&gt; 父母和我</p>
</blockquote>
</li>
<li>男　（おとこ）　男</li>
<li>女　（おんな）　女<blockquote>
<p>泛指男性　女性<br>男の学生（がくせい）　男学生</p>
</blockquote>
</li>
<li>売店　（ばいてん）　小卖部<blockquote>
<p>小规模的限时小卖店<br>売店は駅の外（そと）にあります　-&gt; 小卖部在车站外面</p>
</blockquote>
</li>
<li>一人暮らし　（ひとりぐらし）　单身生活<blockquote>
<p>指一个人过日子，独居<br>私は一人暮らしです　　-&gt; 我一个人生活</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>存在句<ul>
<li>あります　　无生命的物品和植物</li>
<li>います　　有生命的人，动物，昆虫</li>
</ul>
</li>
<li>名1【场所】に名2【物/人】があります/います　　在…有…<blockquote>
<p><span class="red">地点　に，存在主体用　が</span><br>ここは本があります　　-&gt; 这里有书<br>庭に何がありますか　　-&gt; 院子里有什么?</p>
</blockquote>
</li>
<li>名1【物/人】は名2【场所】にあります/います　　…在…<blockquote>
<p><span class="red">存在主体用　は、地点　に</span><br>椅子（いす）は部屋にあります　　-&gt; 椅子在房间里<br>犬はどこにいますか　　<br>= 犬はどこですか　　-&gt; 狗在哪儿？　　更为广泛</p>
</blockquote>
</li>
<li>名1と名2　　…和…<blockquote>
<p>姉と兄は大学生です　　-&gt; 姐姐和哥哥都是大学生</p>
</blockquote>
</li>
<li>方位<ul>
<li>上　（うえ）　上面</li>
<li>下　（した）　下面</li>
<li>中　（なか）　里面，中间</li>
<li>外　（そと）　外面</li>
<li>前　（まえ）　前面</li>
<li>後ろ　（うしろ）　后面</li>
<li>近く　（ちかく）　附近 　<span class="red">近くの家 -&gt;　附近的房屋</span></li>
<li>机（つくえ）の上に猫がいます　　-&gt; 桌子上有一只猫。</li>
</ul>
</li>
<li>ね　<blockquote>
<p>表示确认，用于句末<br>あそこに犬がいますね。　　-&gt; 那边有一条狗啊</p>
</blockquote>
</li>
<li>疑问词+も+ありません/いません　　…都没有<blockquote>
<p>教室（きょうしつ）に誰も（だれも）いません。　　-&gt; 教室里谁都没有<br>冷蔵庫（れいぞうこ）に何もありません。　　-&gt; 冰箱里什么都没有</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一波正则表达式]]></title>
      <url>http://cheesekun.top/2017/03/11/cheesekun.top/ch1008/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基本上是个语言就会有正则表达式吧。虽然只是单单一个语法知识，内容杂到都有专门讲它的书了。<br>虽然正则看起来很复杂，但是对于前端来说，必学吧。<br>毕竟表单处理还是需要用到的，不会写也要看懂。<br>下面就总结了下js正则表达式的用法<br>例子都是用<strong>cheesekun</strong></p>
<blockquote>
<p>では。始めましょう<br>那么，开始吧</p>
</blockquote>
<h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>首先，创建正则表达式有两种方法，一种是正则表达式字面量，一种是使用RegExp对象的构造函数</p>
<ul>
<li>字面量<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex">/chee+kun/</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex">/chee+kun/g</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>通常使用这种，性能较好</p>
</blockquote>
</li>
<li>使用RexExp对象<code>new RegExp(patten, flags)</code><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"chee+sekun"</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"chee+sekun"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>这种用法主要用在无法事先确定模式，只能在运行的时候以字符串形式创建，性能较低</p>
</blockquote>
</li>
</ul>
<h2 id="编写正则表达式模式"><a href="#编写正则表达式模式" class="headerlink" title="编写正则表达式模式"></a>编写正则表达式模式</h2><ul>
<li>不使用特殊符号<blockquote>
<p>/kun/ 即可匹配到”hi，cheesekun，what’s ur name” 和 “what words include ‘kun’”</p>
</blockquote>
</li>
<li>使用特殊符号<blockquote>
<p>举个小例子<br><code>/chee+sekun/</code> 可匹配到”cheesekun”，”cheeeeesekun”但不可以匹配”chesekun”</p>
<blockquote>
<p>其中的+，匹配前面一个表达式（也就是前面的”e”）1次或者多次。等价于 {1,}</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="常用特殊符号"><a href="#常用特殊符号" class="headerlink" title="常用特殊符号"></a>常用特殊符号</h2><ul>
<li>\<blockquote>
<p>转义字符。如/chee+sekun/ 将 + 转义，只能匹配 “cheese+kun”<br>放在非特殊字符前，则表示下一个字符是特殊的，如\b，是一个字符边界，下面会说</p>
</blockquote>
</li>
<li>^<blockquote>
<p>匹配输入的开始<br>如<code>/^cheesekun/</code>可匹配”cheesekun hi”，但不能匹配”hi cheesekun”</p>
</blockquote>
</li>
<li>$<blockquote>
<p>匹配输入的结束<br>如<code>/cheesekun$/</code>可匹配”hi cheesekun”，但不能匹配”cheesekun hi”</p>
</blockquote>
</li>
<li>*<blockquote>
<p>匹配前一个表达式0次或多次。等价于 {0,}<br>如<code>/chee*sekun/</code>可匹配”chesekun”,也可以匹配”cheeeeeeeesekun”</p>
</blockquote>
</li>
<li>+<blockquote>
<p>匹配前一个表达式1次或多次。等价于 {1,}<br>如<code>/chee+sekun/</code>可匹配”cheesekun”,也可以匹配”cheeeeeeeesekun”</p>
</blockquote>
</li>
<li>?<blockquote>
<p>匹配前一个表达式0次或者1次。等价于 {0,1}<br>如<code>/chee?sekun/</code>可匹配”chesekun”,也可以匹配”cheesekun”</p>
</blockquote>
</li>
<li>.<blockquote>
<p>匹配除换行符之外的任何单个字符<br>如<code>/che.sekun/</code>可匹配”cheesekun”,也可以匹配”che♂sekun”</p>
</blockquote>
</li>
<li>(x)<blockquote>
<p>匹配 ‘x’ 并且记住匹配项<br>在正则表达式的匹配环节，要使用 \1, \2, \n 这样的语法<br>如<code>/(cheesekun)(kun)\1\2/</code> 等价于 <code>/cheesekuncheesekun/</code><br>在正则表达式的<a href="#1">替换环节</a>，则要使用像 $1、$2、$n 这样的语法<br>如<code>&quot;cheesekun&quot;.replace(/(cheese)(kun)/,&#39;$2$1&#39;)</code>,会返回 “kuncheese”</p>
</blockquote>
</li>
<li><p>(?:x)</p>
<blockquote>
<p>匹配 ‘x’ 但是不记住匹配项<br><code>/cheese{1,2}kun/ {1,2}</code>只能对 e 起作用<br><code>/(?:cheese){1,2}kun/</code> {1,2}则对cheesekun 起作用，可匹配 “cheesecheesekun”，而不记录匹配项，则不能使用 \1或者 $1<br>如<code>&quot;cheesekun&quot;.replace(/(cheese)(kun)/,&#39;$2$1&#39;)</code>,会返回 “$2kun”</p>
</blockquote>
</li>
<li><p>x(?=y)</p>
<blockquote>
<p>匹配’x’仅仅当’x’后面跟着’y’<br>如<code>/cheese(？=kun)/</code> 会匹配”cheesekun”,也匹配”cheesekun123”<br>但只会返回匹配的”cheese”</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token regex">/cheese(?=kun)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//["cheese"]</span>
<span class="token regex">/cheese(kun)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//["cheesekun", "kun"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>x(?!y)<blockquote>
<p>匹配’x’仅仅当’x’后面不跟着’y’<br>如<code>/cheese(？!kun)/</code> 会匹配”cheese123”,但不能匹配”cheesekun”</p>
</blockquote>
</li>
<li>x|y<blockquote>
<p>匹配’x’或者’y’<br>如/cheese|kun/ 会匹配”cheese hi”,也可以匹配”kun hi”</p>
</blockquote>
</li>
<li>{n},{n,m}<blockquote>
<p>1.表示匹配前一个表达式n次<br>2.表示匹配前一个表达式n到m次<br>如<code>/chee{3}sekun/</code>,匹配”cheeeesekun”或者”cheeeesekun123”<br><code>/chee{3,5}sekun/</code>,匹配”cheeeesekun”或者”cheeeeeesekun123”</p>
</blockquote>
</li>
<li>[xyz]<blockquote>
<p>一个字符集合。匹配方括号的中任意字符，包括转义序列<br>如<code>/cheese[kun]/</code>,可匹配”cheesek”,”cheeseku”,”cheesen”<br>可以使用破折号 - 来指定一个字符范围<br>如<code>/cheese[a-j]/</code>,可匹配”cheesec”,”cheeseg”,不可以匹配”cheese1”</p>
</blockquote>
</li>
<li>[^xyz]<blockquote>
<p>一个反向字符集。匹配任何没有包含在方括号中的字符<br>如<code>/cheese[^kun]/</code>,可匹配”cheesea”,”cheeseab”,”cheesecd”</p>
</blockquote>
</li>
<li>\b<blockquote>
<p>匹配一个词的边界,可认为是 ^ 和 $ 的集合<br>如<code>/cheese\b/</code> 可匹配”kuncheese”<br><code>/\bcheese/</code> 可匹配”cheesekun”</p>
</blockquote>
</li>
<li>\d 匹配一个数字，等价于[0-9]</li>
<li>\D 匹配一个非数字，等价于[^0-9]</li>
<li>\w 匹配一个单字字符（字母、数字或者下划线）,等价于[A-Za-z0-9_]</li>
<li>\W 匹配一个非单字字符（字母、数字或者下划线）,等价于[^A-Za-z0-9_]</li>
<li>\s 匹配一个空白字符，包括空格、制表符、换页符和换行符</li>
<li>\S 匹配一个空白字符，包括空格、制表符、换页符和换行符</li>
<li>\f 匹配一个换页符 (U+000C)</li>
<li>\n 匹配一个换行符 (U+000A)</li>
<li>\r 匹配一个回车符 (U+000D)</li>
</ul>
<h2 id="正则表达式方法"><a href="#正则表达式方法" class="headerlink" title="正则表达式方法"></a>正则表达式方法</h2><ul>
<li><p>RegExp 方法</p>
<ul>
<li><p>test </p>
<blockquote>
<p>在字符串中测试是否匹配的RegExp方法，它返回true或false </p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token regex">/che+sekun/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"cheeeeesekun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>exec</p>
<blockquote>
<p>在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）<br>如果模式使用了匹配项，则匹配项也会一同传入数组</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token regex">/che+sekun/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheeeesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["cheeeesekun"]</span>
<span class="token regex">/ch(e+se)(kun)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheeeesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["cheeeesekun","eeeese","kun"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>String 方法</p>
<ul>
<li><p>replace</p>
<blockquote>
<p>在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheesekun hi"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/hi/</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "cheesekun hello"</span>
<span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(cheese)(kun)/</span><span class="token punctuation">,</span><span class="token string">'$2$1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "kuncheese"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>search</p>
<blockquote>
<p>在字符串中测试匹配，它返回匹配到的位置索引，或者在失败时返回-1</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/eese/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>match</p>
<blockquote>
<p>在字符串中执行查找匹配，它返回一个数组或者在未匹配到时返回null</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheeeeeseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eeeee"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>split</p>
<blockquote>
<p>使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/e/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["ch", "", "s", "kun"]</span>
<span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ee/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["ch", "sekun"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="正则表达式标志"><a href="#正则表达式标志" class="headerlink" title="正则表达式标志"></a>正则表达式标志</h2><ul>
<li>g 全局搜索。也就是找到所有匹配<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheeeeeseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eeeee"]</span>
<span class="token string">"cheeeeeseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/g</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eeeee","eee"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>i 不区分大小写搜索。<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"chEEseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eee"]</span>
<span class="token string">"chEEseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/i</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["EE"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>m 多行搜索。将\n,\r当作换行<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"cheese kun\n hi\r do you\f love\t me"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex">/(\w+)$/gm</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>patt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ["kun", "hi", "me"]</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"cheese kun\n hi\rdo you\nlove\t me"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> patt2 <span class="token operator">=</span> <span class="token regex">/^(\w+)/gm</span>
str2<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>patt2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["cheese", "do", "love"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><pre class="line-numbers language-javascript"><code class="language-javascript">用户名    <span class="token regex">/^[a-z0-9_-]{6,16}$/</span>
密码        <span class="token regex">/^[a-z0-9_-]{6,18}$/</span>
电子邮箱    <span class="token regex">/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</span>
手机号   <span class="token regex">/^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面内容以<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word" target="_blank" rel="external">MDN文档</a>为参考<br>加入了自己写的例子和一些实践后的解释<br>都test过，就当作一份js正则表达式文档给自己或他人参考吧</p>
<blockquote>
<p>大胆になれ。一番になれ。　独自になれ<br>大胆一点。成为第一。独立一点。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[13天总结]]></title>
      <url>http://cheesekun.top/2017/03/08/cheesekun.top/ch1007/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从2.24开始到今天3.8已经13天时间了，ife上完成了17个<a href="https://github.com/cheeseKun/baiduIFE2017" target="_blank" rel="external">普通任务</a>，做一波小总结，理清在任务中初次遇到或者之前没怎么使用的一些知识。</p>
<blockquote>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=543022&auto=1&height=66"></iframe><br>前些天在看&lt;求婚大作战&gt;，特别喜欢这部片子，安利大家</p>
</blockquote>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li><p>transition(过渡属性)</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span> <span class="token property">transition</span><span class="token punctuation">:</span> left <span class="token number">1</span>s <span class="token number">0.4</span>s ease-in-out<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>表示该div的<code>left</code>属性延迟1秒后会在0.4秒的时间内，以ease-in-out(以慢速开始和结束)的过渡效果进行变化<br>通常搭配<code>:hover</code>伪类使用<br>transition通常属性值都是一齐使用，所以没必要去记住子属性。<br>下面是单纯用<code>transition</code>属性实现的导航栏下划线移动效果</p>
</blockquote>
<p></p><p data-height="279" data-theme-id="light" data-slug-hash="gmLgEw" data-default-tab="html,result" data-user="cheesekun" data-embed-version="2" data-pen-title="anime-nav" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/cheesekun/pen/gmLgEw/" target="_blank" rel="external">anime-nav</a> by cheesekun (<a href="http://codepen.io/cheesekun" target="_blank" rel="external">@cheesekun</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><br><script async src="http://production-assets.codepen.io/assets/embed/ei.js"></script><p></p>
<blockquote>
<p>上述效果还使用了<code>~</code>子类选择器<br>举例: a ~ div<br>表示同个父元素下 <code>&lt;a&gt;</code>之后的所有<code>&lt;div&gt;</code>被选择</p>
</blockquote>
</li>
<li><p>响应式</p>
<blockquote>
<p>这个题目撞到挺多有趣的问题<br>主要使用了<code>@meadia</code>媒体查询属性</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">@media only screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">768</span>px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">1024</span>px<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>表示仅当screen(输出设备可浏览宽度)最小值为768px，最大值为1024px时实现<br></p><p data-height="265" data-theme-id="light" data-slug-hash="ZeWdKV" data-default-tab="css,result" data-user="cheesekun" data-embed-version="2" data-pen-title="响应式12栏" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/cheesekun/pen/ZeWdKV/" target="_blank" rel="external">响应式12栏</a> by cheesekun (<a href="http://codepen.io/cheesekun" target="_blank" rel="external">@cheesekun</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="http://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>上面的例子我一开始是使用<code>inline-block</code>，后来发现<code>inline-block</code>有个弊端，会受默认字体宽度影响，并且处理方式极其奇葩，如果想实现无缝衔接<code>inline-block</code>还是算了，乖乖使用<code>float: left</code></p>
<blockquote>
<p>看张鑫旭大神解决<code>inline-block</code>间距的方法<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="external">链接</a></p>
</blockquote>
<p>并且使用了css3中的<code>calc()</code>来进行值的计算</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">50%</span> - <span class="token number">40</span>em<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<blockquote>
<p>上述<code>div</code>在我们不知道父元素的50%是多大的时候，我们可以直接使用<code>calc()</code>，将这个烦人的计算交给浏览器<br>表达式中有“+”和“-”时，其前后必须要有空格，否则报错<br>box-sizing属性特别好用</p>
</blockquote>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token punctuation">{</span> <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<blockquote>
<p>可以直接把该<code>div</code>的<code>border</code>,<code>padding</code>值直接并入到<code>width</code>,这样对布局宽度更加直观。<br><code>box-sizing: inherit</code>则表示继承自父元素 <code>box-sizing</code>值的设定</p>
</blockquote>
</blockquote>
</li>
<li><p>循环添加节点改变dom结构</p>
<blockquote>
<p>不要每进行一次循环创建一个元素就插入到dom，而应该使用createDocumentFrgment()创建一个文档片段,将循环的结果一个一个插入该片段，再将该片段一次插入到dom，减轻浏览器渲染负担</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 打印出排序完的城市排名 */</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"一"</span><span class="token punctuation">,</span> <span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">,</span> <span class="token string">"四"</span><span class="token punctuation">,</span> <span class="token string">"五"</span><span class="token punctuation">,</span> <span class="token string">"六"</span><span class="token punctuation">,</span> <span class="token string">"七"</span><span class="token punctuation">,</span> <span class="token string">"八"</span><span class="token punctuation">,</span> <span class="token string">"九"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> soLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    oLi<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"名："</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"空气质量："</span> <span class="token operator">+</span> <span class="token string">"&lt;b>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/b>"</span><span class="token punctuation">;</span>
    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oLi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  reUl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>模糊匹配<blockquote>
<p>模糊匹配这里使用了正则表达式，暂时不放总结<br>到时再做一篇来总结正则的使用吧</p>
</blockquote>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>果然基础还是很薄，兴致勃勃地想去玩进阶，还是算了</p>
<blockquote>
<p>道に 迷うこと こそ、 道を 知ることだ。<br>只有迷路了，才会知道路到底在哪里。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ife2017 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初1-3」ここは　でぱとです]]></title>
      <url>http://cheesekun.top/2017/03/07/cheesekun.top/ch1006/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>図書館　(としょかん)　图书馆</li>
<li>ホテル　（hotel） 宾馆</li>
<li>銀行　(ぎんこう)　　银行</li>
<li>喫茶店　(きつさてん)　咖啡店</li>
<li>本屋　(ほんや)　书店</li>
<li>デパート　百货商店<blockquote>
<p>department store<br>デパートはここです　-&gt; 百货商店在这里。</p>
</blockquote>
</li>
<li>マンション　(高级)公寓<blockquote>
<p>特指高级公寓　mansion<br>マンションの隣（となり）は病院です　-&gt; 公寓的隔壁是医院</p>
</blockquote>
</li>
<li>コンビニ　便利店<blockquote>
<p>convenience store<br>あのコンビニは1階（かい）です　　那个便利店在一楼</p>
</blockquote>
</li>
<li>病院　(びょういん)　医院<blockquote>
<p>指综合性的专业医院，至少能收容20人<br>びょういんはどこですか　-&gt; 医院在哪里</p>
</blockquote>
</li>
<li>ビル　大楼，大厦<blockquote>
<p><span class="red">小心不要都成长音，会变成beer，</span> building<br>このビルは11階ですか、12階ですか。　这栋大楼是11层还是12层</p>
</blockquote>
</li>
<li>建物 (たてもの)　建筑物<blockquote>
<p>广义指建筑物， 主要指住宅，厂房，库房和商店的房屋<br>あの建物は何（なん）階ですか　那栋建筑有多少层? </p>
</blockquote>
</li>
<li>トイレ　厕所，盥洗室</li>
<li>今日　（きょう）　今天</li>
<li>東京　（とうきょう）</li>
<li>売り場　（うりば）　柜台，出售处<blockquote>
<p>主要表示商品，门票等的出售处<br>切符　（きっぷ）　票<br>切符売り場　-&gt; 售票处 きっつぷ</p>
</blockquote>
</li>
<li>受付　（うけつけ）　接待处<blockquote>
<p>接待来访者的前台。也可以表示负责接待工作的人员<br>受付は1階です  　-&gt; 接待处在一层<br>小野さんは受付です 　 -&gt; 小野是前台接待员</p>
</blockquote>
</li>
<li>国　（くに）　国，国家<blockquote>
<p>广义上指国家，细分化还可表示国土，领土，家乡，地区和地方等意思<br>我が（わが）国　　-&gt; 我国<br>南の（みなみの）国　　-&gt; 南方<br>日本の国　　-&gt; 日本的国土</p>
</blockquote>
</li>
<li>隣（となり）　旁边<blockquote>
<p>一般指紧挨着的隔壁，有时也表示同桌，邻居，<span class="red">也可以指距离远，但中间没有阻隔的隔壁，如和中国隔海的日本</span><br>隣は山田さんの席（せき）です　　-&gt; 旁边是山田先生的座位<br>その建物（たてもの）の隣は学校（がっこう）　　-&gt; 那个建筑旁边是学校</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>远近关系指代<blockquote>
<p>这里（近称）　ここ  こちら<br>那里（中称）　そこ　　そちら<br>那里（远称）　あそこ　　あちら<br>あそこは入り口（いりくち）です　　-&gt; 那边是入口</p>
</blockquote>
</li>
<li>名1は名2[场所]です　…在…<blockquote>
<p>トイレはここです　　-&gt; 厕所在这儿。</p>
</blockquote>
</li>
<li>名はどこですか　　…在哪里?<blockquote>
<p>A: 駅はどこですか　　-&gt; 车站在哪里?<br>B: こちらです　　-&gt; 在这边</p>
</blockquote>
</li>
<li>名1も名2です　　…也是…<blockquote>
<p>助词「も」相当于”也”<br>あなたも中国人ですか　　-&gt; 你也是中国人吗?<br>森さんは会社員（かいしゃいん）です。 小野さんも会社員です　　-&gt; 森先生是公司职员，小野也是。</p>
</blockquote>
</li>
<li>名1は名2ですか、名3ですか　　…是…,还是…？<blockquote>
<p>A: 今日は水曜日（すいようび）ですか、木曜日（もくようび）ですか　-&gt; 今天是星期三还是星期四?<br>B: 水曜日です</p>
</blockquote>
</li>
<li>名はいくらですか　　…多少钱?<blockquote>
<p>その服（ふく）はいくらですか　　-&gt; 那件衣服多少钱?</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度 ife2017]]></title>
      <url>http://cheesekun.top/2017/03/01/cheesekun.top/ch1005/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="http://om2b9s612.bkt.clouddn.com/ife.png" alt=""></p>
<p>期待已久的<a href="http://ife.baidu.com/" target="_blank" rel="external">百度前端技术学院(ife)</a>，2017年春季班终于来了<br>很遗憾去年那一次错过了，失去了涨芝士的时机。<br>今年赶上好时机，闷声发大财，努力提高芝士水平，(扶眼镜)(ノ<em>゜▽゜</em>)<br>从最基础的任务开始做起，我会持续将任务代码提交到<a href="https://github.com/cheeseKun" target="_blank" rel="external">github</a>上去<br>有兴趣的可以去看下,然后随手star是美德，(｡･ω･｡)ﾉ♡</p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>我在每个任务下面都写上README，上面有代码的demo链接和任务描述<br>所以记得点README<br>下面po上每个学院的快捷链接,点击即可</p>
<ul>
<li><p>勇士级任务</p>
<ul>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E5%B0%8F%E8%96%87%E5%AD%A6%E9%99%A2" target="_blank" rel="external">小薇学院</a><blockquote>
<p>零基础入门HTML/CSS</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E6%96%8C%E6%96%8C%E5%AD%A6%E9%99%A2" target="_blank" rel="external">斌斌学院</a><blockquote>
<p>从0开始学习JavaScript</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E8%80%80%E8%80%80%E5%AD%A6%E9%99%A2" target="_blank" rel="external">耀耀学院</a><blockquote>
<p>趣味小游戏，交互小实战，综合小练习</p>
</blockquote>
</li>
</ul>
</li>
<li><p>王者级任务</p>
<ul>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E7%B3%AF%E7%B1%B3%E5%89%8D%E7%AB%AF%E5%AD%A6%E9%99%A2" target="_blank" rel="external">百度糯米前端技术学院</a><blockquote>
<p>包含B(Business)&amp;C(Customs)两端，应用场景涵盖PC、NA和WAP三端。</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/ECharts%20%26%20WebVR%E5%AD%A6%E9%99%A2" target="_blank" rel="external">ECharts &amp; WebVR学院</a><blockquote>
<p>基于ECharts将手上的数据制作成美观的可视化作品,<br>以及如何使用WebVR制作VR展现。</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E5%95%86%E4%B8%9A%E5%B9%B3%E5%8F%B0%E5%AD%A6%E9%99%A2" target="_blank" rel="external">商业平台学院</a><blockquote>
<p>提供Web前端、还有iOS、Android方向</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>2.24到4.24，两个月时间，尽力高质量完成多些任务吧。<br>。<br>。<br>。<br>加油。。。(ﾉﾟ▽ﾟ)ﾉ</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ife2017 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初1-2」こねは　本です]]></title>
      <url>http://cheesekun.top/2017/02/26/cheesekun.top/ch1004/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>ノー   ト　　笔记本<blockquote>
<p>note<br>日本語のノート　-&gt;  日语笔记</p>
</blockquote>
</li>
<li>カメラ　　照相机<blockquote>
<p>camera<br>カメラマン　　-&gt; 摄影师  cameraman</p>
</blockquote>
</li>
<li>テレビ　　电视机<blockquote>
<p>televi(sion)<br>テレビ·ドラマ　　-&gt; 电视连续剧 (television drama)</p>
</blockquote>
</li>
<li>お土産(おみやげ)　　礼物<blockquote>
<p>特产或者(赠送给别人的)礼物<br>誕生日のお土産　　-&gt; 生日礼物</p>
</blockquote>
</li>
<li>名産品(めいさんひん)　特产，名产<blockquote>
<p>多指当地特有的有名的物产<br>シルクはここの名産品です　-&gt; 丝绸是这里的特产</p>
</blockquote>
</li>
<li>シルク　　丝绸<blockquote>
<p>也泛指”丝织品” silk<br>シルクロード　-&gt;　丝绸之路  (silk road)</p>
</blockquote>
</li>
<li>方 (かた)  （敬语）位，人<blockquote>
<p>表示对所指人的敬称<br>この方 -&gt; 这一位<br>日本の方　-&gt; 日本人  (询问是否为日本人时有礼貌)</p>
</blockquote>
</li>
<li>家族　(かぞく)　家人，家属<blockquote>
<p>表示配偶或有血缘关系的家人，家属等， <span class="red">而不是传统中文的大范围</span><br>大家族　-&gt; 大家庭<br>核家族　-&gt; 小家庭</p>
</blockquote>
</li>
<li>母 (はは)　(我)母亲<blockquote>
<p>与他人谈及自己母亲时使用，(家母)不需要私の<br>母の日　-&gt; 母亲节<br>母は先生です　-&gt; 我妈妈是老师</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>范围指代<br>A: これは小野さんのカメラですか　-&gt; 这是小野的相机吗?<br>B： いいえ、それは森さんのカメラです　-&gt; 不，那是森的相机</p>
</li>
<li><p>近称 -&gt; これ·この</p>
<blockquote>
<p>これは本です　　-&gt; 这是书</p>
<ul>
<li>中称 -&gt;　それ·その<br>それはかばんです　-&gt; 那是包</li>
<li>远称 -&gt;　あれ·あの<br>あれはテレビんです　-&gt; 那是电视机<br>あのノートはだれのですか　　-&gt; 那本笔记本是谁的</li>
<li>不定称 -&gt;　どれ·どの  (疑问，哪一个)<br>用于3个或者3个以上选项不确定的时候<br>森さんのかばんはどれですか　-&gt; 森先生的包是哪个?<br>小野さんの机はどなの机ですか -&gt; 小野的桌子是哪张桌子?</li>
</ul>
</blockquote>
</li>
<li>だれ(誰)ですか　　…是谁?<blockquote>
<p><span class="red">提问人物，用 どなた　比较礼貌</span><br>小野先生はどなたですか　-&gt; 小野老师是哪位?</p>
</blockquote>
</li>
<li>何（なん）ですか　　…是什么?<blockquote>
<p>それは何ですか　　-&gt; 那是什么?</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flex布局]]></title>
      <url>http://cheesekun.top/2017/02/24/cheesekun.top/ch1003/</url>
      <content type="html"><![CDATA[<p>使用flex布局特别方便，虽然兼容性问题还是需要解决<br>下面参考了<a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="external">30分钟学会flex布局</a><br>简化了很多，帮助记忆。<br>。<br>。<br>实现 flex 布局需要先指定一个容器，任何一个容器都可以被置顶为 flex 布局，<br>这样容器内部的元素就可以使用 flex 来进行布局。</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>
   <span class="token property">display</span><span class="token punctuation">:</span> flex | inline-flex<span class="token punctuation">;</span>     //可以有两种取值
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>分别生成一个块状或行内的 flex 容器盒子。简单说来，如果你使用块元素如 div，你就可以使用 flex，而如果你使用行内元素，你可以使用 inline-flex。<br><strong>当设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p>
<h2 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h2><ul>
<li>对父属性<ul>
<li>flex-direction<blockquote>
<p>定义主轴方向<br>row<br>row-reverse<br>column<br>column-reverse</p>
</blockquote>
</li>
<li>flex-wrap<blockquote>
<p>定义flex元素单行还是多行显示<br>nowrap<br>wrap<br>wrap-reverse</p>
</blockquote>
</li>
<li>flex-flow<blockquote>
<p>flex-direction 和 flex-wrap 缩写</p>
</blockquote>
</li>
<li>justify-content<blockquote>
<p>将flex元素与主轴对齐<br>flex-start<br>flex-end<br>center<br>space-around    （每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍）<br>space-between （两端对齐，项目之间的间隔相等，即剩余空间等分成间隙）</p>
</blockquote>
</li>
<li>align-items<blockquote>
<p>在交叉轴上对齐多个元素<br>stretch （默认值，如果项目未设置高度或者设为 auto，将占满整个容器的高度）<br>flex-start<br>flex-end<br>center<br>baseline （项目的第一行文字的基线对齐 也就是对齐各个flex元素第一行文字的基线）</p>
</blockquote>
</li>
<li>align-content<blockquote>
<p>当交叉轴有多余空间时，对齐容器内的轴线<br>stretch<br>flex-start<br>flex-end<br>center<br>space-between<br>space-around</p>
</blockquote>
</li>
</ul>
</li>
<li><p>对子属性</p>
<ul>
<li>align-self<blockquote>
<p>在交叉轴上对齐一个元素,覆盖align-items所设的值<br>flex-start<br>flex-end<br>center<br>baseline<br>stretch</p>
</blockquote>
</li>
<li>order<blockquote>
<p>决定flex元素的顺序<br>0</p>
</blockquote>
</li>
<li>flex-basis<blockquote>
<p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间<br><strong>当主轴为水平方向的时候，当设置了 flex-basis</strong><br><strong>flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</strong></p>
</blockquote>
</li>
<li>flex-grow<blockquote>
<p>定义flex元素的放大比例<br>默认值为 0，即如果存在剩余空间，也不放大<br>当所有的项目都以 flex-basis 的值进行排列后，仍有剩余空间，那么这时候 flex-grow 就会发挥作用了<br>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)<br>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>
</blockquote>
</li>
<li>flex-shrink<blockquote>
<p>定义了项目的缩小比例<br>默认值: 1，即如果空间不足，该项目将缩小，负值对该属性无效。<br>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。<br>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p>
</blockquote>
</li>
<li><p>flex</p>
<blockquote>
<p>flex-grow, flex-shrink 和 flex-basis的简写</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span></span><span class="token punctuation">{</span>
   <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">'flex-grow'</span>> &lt;<span class="token string">'flex-shrink'</span>>? || &lt;<span class="token string">'flex-basis'</span>> ]
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>默认值：0 1 auto， 即不放大，可缩小，大小与 width、height<br>建议优先使用这个属性，而不是单独写三个分离的属性。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="小实例"><a href="#小实例" class="headerlink" title="小实例"></a>小实例</h2><p><a href="http://codepen.io/cheesekun/pen/EZqKVm" target="_blank" rel="external">codepen杂实例</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
            <tag> 布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初1-1」李さんは　中国人です]]></title>
      <url>http://cheesekun.top/2017/02/23/cheesekun.top/ch1002/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>先生 (せんせい)   老师<blockquote>
<p>老师，医生和律师<br>大学の先生　-&gt; 大学老师</p>
</blockquote>
</li>
<li>社员 (しゃいん)   职员<blockquote>
<p>某一公司的人，<span class="red">使用前会出现较明确的所属公司</span><br>旅行会社の社员  -&gt; 旅行社的职员</p>
</blockquote>
</li>
<li>会社员 (かいしゃいん)　公司职员<blockquote>
<p>笼统概念，表示一种职业<br>兄は会社员ではあぃません　　-&gt; 我哥不是公司职员</p>
</blockquote>
</li>
<li>父 (ちち)　　(我)父亲<blockquote>
<p>在与外人谈论自己父亲时使用，已包含 我的ちち，所以直接代表我的父亲，不需要加　私の父<br>父は中国人です　-&gt; 我父亲是日本人</p>
</blockquote>
</li>
<li>あの人 (あのひと)  那个人<blockquote>
<p>表示第三人称， 不强调性别<br>あの人は田中さんですか．　-&gt; 那人是田中君吗？</p>
</blockquote>
</li>
<li>私　（わたし）　我<blockquote>
<p>第一人称， 男女通用，<span class="red">会话中多被省略</span><br>私は学生です。 -&gt; 我是学生</p>
</blockquote>
</li>
<li>あなた　　　　你<blockquote>
<p>第二人称， 不知道对方姓名但必须称呼对方时使用<br><span class="red">老婆称呼老公，也会使用</span><br>あなたはせん先生ですか　　-&gt; 你是老师吗？</p>
</blockquote>
</li>
<li>どうも　　　「副」非常，很<blockquote>
<p>一般用在表示道歉或感谢。<span class="red">当关系特别好时，どうも就可以直接表示感谢或道歉</span><br>どうもすみません　　　-&gt; 实在对不起</p>
</blockquote>
</li>
<li>あつ　　　「叹」哎 哎呀<blockquote>
<p>吃惊或情急下发出的声音<br>あつ、すみません。　　-&gt; 呀，对不起</p>
</blockquote>
</li>
<li>ちがいます　　不是<blockquote>
<p>针对一般疑问句所做出的否定回答<br>A: あの人は教授ですか　-&gt; 那人是教授吗<br>B: いいえ、ちがいます　-&gt; 不，不是的</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>肯定句<ul>
<li>名は名です   ..是..<blockquote>
<p>用于现在时或将来时<br>明日は雨です　　-&gt; 明天下雨</p>
</blockquote>
</li>
<li>名1は名2では(じや)あぃません   ..不是..<blockquote>
<p>仅适用与二者都是名词的情况<br>口语使用<span class="red">通常把 では　换成　じや</span><br>明日は日曜日じやあぃません　-&gt; 明天不是星期天</p>
</blockquote>
</li>
</ul>
</li>
<li>疑问句及应答<ul>
<li>名1は名2ですか  ..是..吗?<blockquote>
<p>助词表示疑问。日语问句在句末不使用“?”<br>A: あの人は田中さんですか  -&gt; 那个人是田中吗?</p>
</blockquote>
</li>
<li>はい、そうです　-&gt; 是，是的</li>
<li>いいえ、ちがいます　-&gt;　不，不是的</li>
<li>分(わ)かぃません   -&gt;  不知道</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[教练,我要学日语]]></title>
      <url>http://cheesekun.top/2017/02/22/cheesekun.top/ch1001/</url>
      <content type="html"><![CDATA[<p>从小以来一直在看动漫<br>大学又喜欢上日剧<br>耳濡目染<br>对日语产生了很大兴趣<br>大学4年想花些时间学好它<br>以后去日本才能去勾搭穿校服的日本妹子<br>没错，日漫里，女孩子说</p>
<blockquote>
<p>ね。。。xx君</p>
</blockquote>
<p>的时候<br>好可爱。。(ﾉﾟ▽ﾟ)ﾉ<br>没错，就是这么单纯的目的<br>我之后会不定期更新在沪江网学习的「标准日本语」<br>也算是督促自己吧<br>(ﾉﾟ▽ﾟ)ﾉ<br>又水一贴</p>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终究到 hexo]]></title>
      <url>http://cheesekun.top/2017/02/21/cheesekun.top/ch1000/</url>
      <content type="html"><![CDATA[<p>一开始在使用wordpress写博客还是hexo写博客上纠结了很久<br>然而拗不过wordpress是世界上使用人数最多的博客系统，所以就强行用了<br>然而对于有强迫症的我来说，wordpress的文字排版要我命<br>经常性得为一篇文章进行各种修改，orz受不了<br>后来接触了markdown，用它来写东西简直爽到飞起<br>完全不需要care排版，可以专心写东西<br>并且更巧的是，hexo的博文都是需要用markdown模式来写！！！<br>美滋滋。。<br>因此，放弃了使用几个月的wordpress，现在专心使用hexo。<br>并且，<br>现在不用交那万恶的服务器费用啦。<br>hhhhhhh…..(ﾉﾟ▽ﾟ)ﾉ</p>
<hr>
<p>下面来写几条hexo比较常使用的git:</p>
<ul>
<li>生成静态文件<pre class="line-numbers language-git"><code class="language-git">$ hexo generate
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>运行hexo本地服务器<pre class="line-numbers language-git"><code class="language-git">$ hexo server
[http://localhost:4000/](http://localhost:4000/)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>安装主题<pre class="line-numbers language-git"><code class="language-git">cd/hexo/themes
git clone https://主题下载链接
cd ./主题目录、
git pull
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>然后修改/hexo/config.yml, 将其中的theme改为主题名称<br>重新运行 $ hexo generate $ hexo server</p>
</blockquote>
</li>
<li>上传hexo到github<pre class="line-numbers language-git"><code class="language-git">hexo generate
hexo deploy
//简写合并如下
hexo d -g
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
。<br>。<br>。<br>大概就这样，水完第一篇<br>。<br>(ﾉﾟ▽ﾟ)ﾉ</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
