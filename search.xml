<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[「标日·初1-4」部屋に　机と　いすが　あります]]></title>
      <url>http://cheesekun.top/2017/03/12/cheesekun.top/ch1009/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>部屋　（へや） 　房间</li>
<li>庭　（にわ）　院子</li>
<li>居間　（いま）　起居室</li>
<li>冷蔵庫　（れいぞうこ）　电冰箱</li>
<li>壁　（かべ）　墙壁</li>
<li>猫　（ねこ）　猫</li>
<li>犬　（いぬ）　犬</li>
<li>子供　（こども）　小孩</li>
<li>女　（おんな）　女</li>
<li>生徒　（せいと）　学生</li>
<li>教室　（きょうしつ）　教室</li>
<li>公園　（こうえん）　公园</li>
<li>地下鉄　（ちかてつ）　地铁</li>
<li>木　（き）　树</li>
<li>家　（いえ）　家<blockquote>
<p>可表示房子，(自)家，或者家庭家族<br>私の家は3人です　-&gt; 我家有三口人</p>
</blockquote>
</li>
<li>眼鏡　（めがね）　眼镜<blockquote>
<p>现在一般不写汉字，而写片假名（メガネ）<br>黒（くろ）メガネ　-&gt; 墨镜</p>
</blockquote>
</li>
<li>兄弟　（きょうだい）　兄弟姐妹<blockquote>
<p>兄弟姐妹都可以使用，<span class="red">若称别人的兄弟姐妹时，则要说[ご兄弟]</span><br>A:ご兄弟がいますが　-&gt; 你有兄弟姐妹吗?<br>B:ええ、妹（いもうと）がいます　　-&gt; 有，有妹妹</p>
</blockquote>
</li>
<li>両親　（りょうしん）　 父母，双亲<blockquote>
<p>说对方父母时，要加上[ご]，ご両親<br>両親と私　　-&gt; 父母和我</p>
</blockquote>
</li>
<li>男　（おとこ）　男</li>
<li>女　（おんな）　女<blockquote>
<p>泛指男性　女性<br>男の学生（がくせい）　男学生</p>
</blockquote>
</li>
<li>売店　（ばいてん）　小卖部<blockquote>
<p>小规模的限时小卖店<br>売店は駅の外（そと）にあります　-&gt; 小卖部在车站外面</p>
</blockquote>
</li>
<li>一人暮らし　（ひとりぐらし）　单身生活<blockquote>
<p>指一个人过日子，独居<br>私は一人暮らしです　　-&gt; 我一个人生活</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>存在句<ul>
<li>あります　　无生命的物品和植物</li>
<li>います　　有生命的人，动物，昆虫</li>
</ul>
</li>
<li>名1【场所】に名2【物/人】があります/います　　在…有…<blockquote>
<p><span class="red">地点　に，存在主体用　が</span><br>ここは本があります　　-&gt; 这里有书<br>庭に何がありますか　　-&gt; 院子里有什么?</p>
</blockquote>
</li>
<li>名1【物/人】は名2【场所】にあります/います　　…在…<blockquote>
<p><span class="red">存在主体用　は、地点　に</span><br>椅子（いす）は部屋にあります　　-&gt; 椅子在房间里<br>犬はどこにいますか　　<br>= 犬はどこですか　　-&gt; 狗在哪儿？　　更为广泛</p>
</blockquote>
</li>
<li>名1と名2　　…和…<blockquote>
<p>姉と兄は大学生です　　-&gt; 姐姐和哥哥都是大学生</p>
</blockquote>
</li>
<li>方位<ul>
<li>上　（うえ）　上面</li>
<li>下　（した）　下面</li>
<li>中　（なか）　里面，中间</li>
<li>外　（そと）　外面</li>
<li>前　（まえ）　前面</li>
<li>後ろ　（うしろ）　后面</li>
<li>近く　（ちかく）　附近 　<span class="red">近くの家 -&gt;　附近的房屋</span></li>
<li>机（つくえ）の上に猫がいます　　-&gt; 桌子上有一只猫。</li>
</ul>
</li>
<li>ね　<blockquote>
<p>表示确认，用于句末<br>あそこに犬がいますね。　　-&gt; 那边有一条狗啊</p>
</blockquote>
</li>
<li>疑问词+も+ありません/いません　　…都没有<blockquote>
<p>教室（きょうしつ）に誰も（だれも）いません。　　-&gt; 教室里谁都没有<br>冷蔵庫（れいぞうこ）に何もありません。　　-&gt; 冰箱里什么都没有</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一波正则表达式]]></title>
      <url>http://cheesekun.top/2017/03/11/cheesekun.top/ch1008/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>基本上是个语言就会有正则表达式吧。虽然只是单单一个语法知识，内容杂到都有专门讲它的书了。<br>虽然正则看起来很复杂，但是对于前端来说，必学吧。<br>毕竟表单处理还是需要用到的，不会写也要看懂。<br>下面就总结了下js正则表达式的用法<br>例子都是用<strong>cheesekun</strong></p>
<blockquote>
<p>では。始めましょう<br>那么，开始吧</p>
</blockquote>
<h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>首先，创建正则表达式有两种方法，一种是正则表达式字面量，一种是使用RegExp对象的构造函数</p>
<ul>
<li>字面量<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex">/chee+kun/</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex">/chee+kun/g</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>通常使用这种，性能较好</p>
</blockquote>
</li>
<li>使用RexExp对象<code>new RegExp(patten, flags)</code><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"chee+sekun"</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"chee+sekun"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>这种用法主要用在无法事先确定模式，只能在运行的时候以字符串形式创建，性能较低</p>
</blockquote>
</li>
</ul>
<h2 id="编写正则表达式模式"><a href="#编写正则表达式模式" class="headerlink" title="编写正则表达式模式"></a>编写正则表达式模式</h2><ul>
<li>不使用特殊符号<blockquote>
<p>/kun/ 即可匹配到”hi，cheesekun，what’s ur name” 和 “what words include ‘kun’”</p>
</blockquote>
</li>
<li>使用特殊符号<blockquote>
<p>举个小例子<br><code>/chee+sekun/</code> 可匹配到”cheesekun”，”cheeeeesekun”但不可以匹配”chesekun”</p>
<blockquote>
<p>其中的+，匹配前面一个表达式（也就是前面的”e”）1次或者多次。等价于 {1,}</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="常用特殊符号"><a href="#常用特殊符号" class="headerlink" title="常用特殊符号"></a>常用特殊符号</h2><ul>
<li>\<blockquote>
<p>转义字符。如/chee+sekun/ 将 + 转义，只能匹配 “cheese+kun”<br>放在非特殊字符前，则表示下一个字符是特殊的，如\b，是一个字符边界，下面会说</p>
</blockquote>
</li>
<li>^<blockquote>
<p>匹配输入的开始<br>如<code>/^cheesekun/</code>可匹配”cheesekun hi”，但不能匹配”hi cheesekun”</p>
</blockquote>
</li>
<li>$<blockquote>
<p>匹配输入的结束<br>如<code>/cheesekun$/</code>可匹配”hi cheesekun”，但不能匹配”cheesekun hi”</p>
</blockquote>
</li>
<li>*<blockquote>
<p>匹配前一个表达式0次或多次。等价于 {0,}<br>如<code>/chee*sekun/</code>可匹配”chesekun”,也可以匹配”cheeeeeeeesekun”</p>
</blockquote>
</li>
<li>+<blockquote>
<p>匹配前一个表达式1次或多次。等价于 {1,}<br>如<code>/chee+sekun/</code>可匹配”cheesekun”,也可以匹配”cheeeeeeeesekun”</p>
</blockquote>
</li>
<li>?<blockquote>
<p>匹配前一个表达式0次或者1次。等价于 {0,1}<br>如<code>/chee?sekun/</code>可匹配”chesekun”,也可以匹配”cheesekun”</p>
</blockquote>
</li>
<li>.<blockquote>
<p>匹配除换行符之外的任何单个字符<br>如<code>/che.sekun/</code>可匹配”cheesekun”,也可以匹配”che♂sekun”</p>
</blockquote>
</li>
<li>(x)<blockquote>
<p>匹配 ‘x’ 并且记住匹配项<br>在正则表达式的匹配环节，要使用 \1, \2, \n 这样的语法<br>如<code>/(cheesekun)(kun)\1\2/</code> 等价于 <code>/cheesekuncheesekun/</code><br>在正则表达式的<a href="#1">替换环节</a>，则要使用像 $1、$2、$n 这样的语法<br>如<code>&quot;cheesekun&quot;.replace(/(cheese)(kun)/,&#39;$2$1&#39;)</code>,会返回 “kuncheese”</p>
</blockquote>
</li>
<li>(?:x)<blockquote>
<p>匹配 ‘x’ 但是不记住匹配项<br><code>/cheese{1,2}kun/ {1,2}</code>只能对 e 起作用<br><code>/(?:cheese){1,2}kun/</code> {1,2}则对cheesekun 起作用，可匹配 “cheesecheesekun”，而不记录匹配项，则不能使用 \1或者 $1<br>如<code>&quot;cheesekun&quot;.replace(/(cheese)(kun)/,&#39;$2$1&#39;)</code>,会返回 “$2kun”</p>
</blockquote>
</li>
<li><p>x(?=y)</p>
<blockquote>
<p>匹配’x’仅仅当’x’后面跟着’y’<br>如<code>/cheese(？=kun)/</code> 会匹配”cheesekun”,也匹配”cheesekun123”<br>但只会返回匹配的”cheese”</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token regex">/cheese(?=kun)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//["cheese"]</span>
<span class="token regex">/cheese(kun)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//["cheesekun", "kun"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>x(?!y)<blockquote>
<p>匹配’x’仅仅当’x’后面不跟着’y’<br>如<code>/cheese(？!kun)/</code> 会匹配”cheese123”,但不能匹配”cheesekun”</p>
</blockquote>
</li>
<li>x|y<blockquote>
<p>匹配’x’或者’y’<br>如/cheese|kun/ 会匹配”cheese hi”,也可以匹配”kun hi”</p>
</blockquote>
</li>
<li>{n},{n,m}<blockquote>
<p>1.表示匹配前一个表达式n次<br>2.表示匹配前一个表达式n到m次<br>如<code>/chee{3}sekun/</code>,匹配”cheeeesekun”或者”cheeeesekun123”<br><code>/chee{3,5}sekun/</code>,匹配”cheeeesekun”或者”cheeeeeesekun123”</p>
</blockquote>
</li>
<li>[xyz]<blockquote>
<p>一个字符集合。匹配方括号的中任意字符，包括转义序列<br>如<code>/cheese[kun]/</code>,可匹配”cheesek”,”cheeseku”,”cheesen”<br>可以使用破折号 - 来指定一个字符范围<br>如<code>/cheese[a-j]/</code>,可匹配”cheesec”,”cheeseg”,不可以匹配”cheese1”</p>
</blockquote>
</li>
<li>[^xyz]<blockquote>
<p>一个反向字符集。匹配任何没有包含在方括号中的字符<br>如<code>/cheese[^kun]/</code>,可匹配”cheesea”,”cheeseab”,”cheesecd”</p>
</blockquote>
</li>
<li>\b<blockquote>
<p>匹配一个词的边界,可认为是 ^ 和 $ 的集合<br>如<code>/cheese\b/</code> 可匹配”kuncheese”<br><code>/\bcheese/</code> 可匹配”cheesekun”</p>
</blockquote>
</li>
<li>\d 匹配一个数字，等价于[0-9]</li>
<li>\D 匹配一个非数字，等价于[^0-9]</li>
<li>\w 匹配一个单字字符（字母、数字或者下划线）,等价于[A-Za-z0-9_]</li>
<li>\W 匹配一个非单字字符（字母、数字或者下划线）,等价于[^A-Za-z0-9_]</li>
<li>\s 匹配一个空白字符，包括空格、制表符、换页符和换行符</li>
<li>\S 匹配一个空白字符，包括空格、制表符、换页符和换行符</li>
<li>\f 匹配一个换页符 (U+000C)</li>
<li>\n 匹配一个换行符 (U+000A)</li>
<li>\r 匹配一个回车符 (U+000D)</li>
</ul>
<h2 id="正则表达式方法"><a href="#正则表达式方法" class="headerlink" title="正则表达式方法"></a>正则表达式方法</h2><ul>
<li><p>RegExp 方法</p>
<ul>
<li><p>test </p>
<blockquote>
<p>在字符串中测试是否匹配的RegExp方法，它返回true或false</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token regex">/che+sekun/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"cheeeeesekun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>exec</p>
<blockquote>
<p>在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）<br>如果模式使用了匹配项，则匹配项也会一同传入数组</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token regex">/che+sekun/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheeeesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["cheeeesekun"]</span>
<span class="token regex">/ch(e+se)(kun)/</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cheeeesekun123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["cheeeesekun","eeeese","kun"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>String 方法</p>
<ul>
<li><p>replace</p>
<blockquote>
<p>在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheesekun hi"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/hi/</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "cheesekun hello"</span>
<span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(cheese)(kun)/</span><span class="token punctuation">,</span><span class="token string">'$2$1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "kuncheese"</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>search</p>
<blockquote>
<p>在字符串中测试匹配，它返回匹配到的位置索引，或者在失败时返回-1</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex">/eese/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>match</p>
<blockquote>
<p>在字符串中执行查找匹配，它返回一个数组或者在未匹配到时返回null</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheeeeeseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eeeee"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>split</p>
<blockquote>
<p>使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/e/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["ch", "", "s", "kun"]</span>
<span class="token string">"cheesekun"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex">/ee/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["ch", "sekun"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="正则表达式标志"><a href="#正则表达式标志" class="headerlink" title="正则表达式标志"></a>正则表达式标志</h2><ul>
<li>g 全局搜索。也就是找到所有匹配<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"cheeeeeseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eeeee"]</span>
<span class="token string">"cheeeeeseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/g</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eeeee","eee"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>i 不区分大小写搜索。<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token string">"chEEseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["eee"]</span>
<span class="token string">"chEEseeekun"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/ee*/i</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// ["EE"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>m 多行搜索。将\n,\r当作换行<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"cheese kun\n hi\r do you\f love\t me"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex">/(\w+)$/gm</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>patt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ["kun", "hi", "me"]</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">"cheese kun\n hi\rdo you\nlove\t me"</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> patt2 <span class="token operator">=</span> <span class="token regex">/^(\w+)/gm</span>
str2<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>patt2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ["cheese", "do", "love"]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><pre class="line-numbers language-javascript"><code class="language-javascript">用户名    <span class="token regex">/^[a-z0-9_-]{6,16}$/</span>
密码        <span class="token regex">/^[a-z0-9_-]{6,18}$/</span>
电子邮箱    <span class="token regex">/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</span>
手机号   <span class="token regex">/^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面内容以<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#special-non-word" target="_blank" rel="external">MDN文档</a>为参考<br>加入了自己写的例子和一些实践后的解释<br>都test过，就当作一份js正则表达式文档给自己或他人参考吧</p>
<blockquote>
<p>大胆になれ。一番になれ。　独自になれ<br>大胆一点。成为第一。独立一点。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[13天总结]]></title>
      <url>http://cheesekun.top/2017/03/08/cheesekun.top/ch1007/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从2.24开始到今天3.8已经13天时间了，ife上完成了17个<a href="https://github.com/cheeseKun/baiduIFE2017" target="_blank" rel="external">普通任务</a>，做一波小总结，理清在任务中初次遇到或者之前没怎么使用的一些知识。</p>
<blockquote>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=543022&auto=1&height=66"></iframe><br>前些天在看&lt;求婚大作战&gt;，特别喜欢这部片子，安利大家</p>
</blockquote>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul>
<li><p>transition(过渡属性)</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span> <span class="token property">transition</span><span class="token punctuation">:</span> left <span class="token number">1</span>s <span class="token number">0.4</span>s ease-in-out<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>表示该div的<code>left</code>属性延迟1秒后会在0.4秒的时间内，以ease-in-out(以慢速开始和结束)的过渡效果进行变化<br>通常搭配<code>:hover</code>伪类使用<br>transition通常属性值都是一齐使用，所以没必要去记住子属性。<br>下面是单纯用<code>transition</code>属性实现的导航栏下划线移动效果</p>
</blockquote>
<p></p><p data-height="279" data-theme-id="light" data-slug-hash="gmLgEw" data-default-tab="html,result" data-user="cheesekun" data-embed-version="2" data-pen-title="anime-nav" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/cheesekun/pen/gmLgEw/" target="_blank" rel="external">anime-nav</a> by cheesekun (<a href="http://codepen.io/cheesekun" target="_blank" rel="external">@cheesekun</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><br><script async src="http://production-assets.codepen.io/assets/embed/ei.js"></script><p></p>
<blockquote>
<p>上述效果还使用了<code>~</code>子类选择器<br>举例: a ~ div<br>表示同个父元素下 <code>&lt;a&gt;</code>之后的所有<code>&lt;div&gt;</code>被选择</p>
</blockquote>
</li>
<li><p>响应式</p>
<blockquote>
<p>这个题目撞到挺多有趣的问题<br>主要使用了<code>@meadia</code>媒体查询属性</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css">@media only screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">768</span>px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">1024</span>px<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>表示仅当screen(输出设备可浏览宽度)最小值为768px，最大值为1024px时实现<br></p><p data-height="265" data-theme-id="light" data-slug-hash="ZeWdKV" data-default-tab="css,result" data-user="cheesekun" data-embed-version="2" data-pen-title="响应式12栏" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/cheesekun/pen/ZeWdKV/" target="_blank" rel="external">响应式12栏</a> by cheesekun (<a href="http://codepen.io/cheesekun" target="_blank" rel="external">@cheesekun</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="http://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>上面的例子我一开始是使用<code>inline-block</code>，后来发现<code>inline-block</code>有个弊端，会受默认字体宽度影响，并且处理方式极其奇葩，如果想实现无缝衔接<code>inline-block</code>还是算了，乖乖使用<code>float: left</code></p>
<blockquote>
<p>看张鑫旭大神解决<code>inline-block</code>间距的方法<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="external">链接</a></p>
</blockquote>
<p>并且使用了css3中的<code>calc()</code>来进行值的计算</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">50%</span> - <span class="token number">40</span>em<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<blockquote>
<p>上述<code>div</code>在我们不知道父元素的50%是多大的时候，我们可以直接使用<code>calc()</code>，将这个烦人的计算交给浏览器<br>表达式中有“+”和“-”时，其前后必须要有空格，否则报错<br>box-sizing属性特别好用</p>
</blockquote>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token punctuation">{</span> <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<blockquote>
<p>可以直接把该<code>div</code>的<code>border</code>,<code>padding</code>值直接并入到<code>width</code>,这样对布局宽度更加直观。<br><code>box-sizing: inherit</code>则表示继承自父元素 <code>box-sizing</code>值的设定</p>
</blockquote>
</blockquote>
</li>
<li><p>循环添加节点改变dom结构</p>
<blockquote>
<p>不要每进行一次循环创建一个元素就插入到dom，而应该使用createDocumentFrgment()创建一个文档片段,将循环的结果一个一个插入该片段，再将该片段一次插入到dom，减轻浏览器渲染负担</p>
</blockquote>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 打印出排序完的城市排名 */</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"一"</span><span class="token punctuation">,</span> <span class="token string">"二"</span><span class="token punctuation">,</span> <span class="token string">"三"</span><span class="token punctuation">,</span> <span class="token string">"四"</span><span class="token punctuation">,</span> <span class="token string">"五"</span><span class="token punctuation">,</span> <span class="token string">"六"</span><span class="token punctuation">,</span> <span class="token string">"七"</span><span class="token punctuation">,</span> <span class="token string">"八"</span><span class="token punctuation">,</span> <span class="token string">"九"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> soLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> oLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    oLi<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"名："</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"空气质量："</span> <span class="token operator">+</span> <span class="token string">"&lt;b>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/b>"</span><span class="token punctuation">;</span>
    fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>oLi<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  reUl<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li>模糊匹配<blockquote>
<p>模糊匹配这里使用了正则表达式，暂时不放总结<br>到时再做一篇来总结正则的使用吧</p>
</blockquote>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>果然基础还是很薄，兴致勃勃地想去玩进阶，还是算了</p>
<blockquote>
<p>道に 迷うこと こそ、 道を 知ることだ。<br>只有迷路了，才会知道路到底在哪里。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ife2017 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初1-3」ここは　でぱとです]]></title>
      <url>http://cheesekun.top/2017/03/07/cheesekun.top/ch1006/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>図書館　(としょかん)　图书馆</li>
<li>ホテル　（hotel） 宾馆</li>
<li>銀行　(ぎんこう)　　银行</li>
<li>喫茶店　(きつさてん)　咖啡店</li>
<li>本屋　(ほんや)　书店</li>
<li>デパート　百货商店<blockquote>
<p>department store<br>デパートはここです　-&gt; 百货商店在这里。</p>
</blockquote>
</li>
<li>マンション　(高级)公寓<blockquote>
<p>特指高级公寓　mansion<br>マンションの隣（となり）は病院です　-&gt; 公寓的隔壁是医院</p>
</blockquote>
</li>
<li>コンビニ　便利店<blockquote>
<p>convenience store<br>あのコンビニは1階（かい）です　　那个便利店在一楼</p>
</blockquote>
</li>
<li>病院　(びょういん)　医院<blockquote>
<p>指综合性的专业医院，至少能收容20人<br>びょういんはどこですか　-&gt; 医院在哪里</p>
</blockquote>
</li>
<li>ビル　大楼，大厦<blockquote>
<p><span class="red">小心不要都成长音，会变成beer，</span> building<br>このビルは11階ですか、12階ですか。　这栋大楼是11层还是12层</p>
</blockquote>
</li>
<li>建物 (たてもの)　建筑物<blockquote>
<p>广义指建筑物， 主要指住宅，厂房，库房和商店的房屋<br>あの建物は何（なん）階ですか　那栋建筑有多少层? </p>
</blockquote>
</li>
<li>トイレ　厕所，盥洗室</li>
<li>今日　（きょう）　今天</li>
<li>東京　（とうきょう）</li>
<li>売り場　（うりば）　柜台，出售处<blockquote>
<p>主要表示商品，门票等的出售处<br>切符　（きっぷ）　票<br>切符売り場　-&gt; 售票处 きっつぷ</p>
</blockquote>
</li>
<li>受付　（うけつけ）　接待处<blockquote>
<p>接待来访者的前台。也可以表示负责接待工作的人员<br>受付は1階です  　-&gt; 接待处在一层<br>小野さんは受付です 　 -&gt; 小野是前台接待员</p>
</blockquote>
</li>
<li>国　（くに）　国，国家<blockquote>
<p>广义上指国家，细分化还可表示国土，领土，家乡，地区和地方等意思<br>我が（わが）国　　-&gt; 我国<br>南の（みなみの）国　　-&gt; 南方<br>日本の国　　-&gt; 日本的国土</p>
</blockquote>
</li>
<li>隣（となり）　旁边<blockquote>
<p>一般指紧挨着的隔壁，有时也表示同桌，邻居，<span class="red">也可以指距离远，但中间没有阻隔的隔壁，如和中国隔海的日本</span><br>隣は山田さんの席（せき）です　　-&gt; 旁边是山田先生的座位<br>その建物（たてもの）の隣は学校（がっこう）　　-&gt; 那个建筑旁边是学校</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>远近关系指代<blockquote>
<p>这里（近称）　ここ  こちら<br>那里（中称）　そこ　　そちら<br>那里（远称）　あそこ　　あちら<br>あそこは入り口（いりくち）です　　-&gt; 那边是入口</p>
</blockquote>
</li>
<li>名1は名2[场所]です　…在…<blockquote>
<p>トイレはここです　　-&gt; 厕所在这儿。</p>
</blockquote>
</li>
<li>名はどこですか　　…在哪里?<blockquote>
<p>A: 駅はどこですか　　-&gt; 车站在哪里?<br>B: こちらです　　-&gt; 在这边</p>
</blockquote>
</li>
<li>名1も名2です　　…也是…<blockquote>
<p>助词「も」相当于”也”<br>あなたも中国人ですか　　-&gt; 你也是中国人吗?<br>森さんは会社員（かいしゃいん）です。 小野さんも会社員です　　-&gt; 森先生是公司职员，小野也是。</p>
</blockquote>
</li>
<li>名1は名2ですか、名3ですか　　…是…,还是…？<blockquote>
<p>A: 今日は水曜日（すいようび）ですか、木曜日（もくようび）ですか　-&gt; 今天是星期三还是星期四?<br>B: 水曜日です</p>
</blockquote>
</li>
<li>名はいくらですか　　…多少钱?<blockquote>
<p>その服（ふく）はいくらですか　　-&gt; 那件衣服多少钱?</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[百度 ife2017]]></title>
      <url>http://cheesekun.top/2017/03/01/cheesekun.top/ch1005/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="http://om2b9s612.bkt.clouddn.com/ife.png" alt=""></p>
<p>期待已久的<a href="http://ife.baidu.com/" target="_blank" rel="external">百度前端技术学院(ife)</a>，2017年春季班终于来了<br>很遗憾去年那一次错过了，失去了涨芝士的时机。<br>今年赶上好时机，闷声发大财，努力提高芝士水平，(扶眼镜)(ノ<em>゜▽゜</em>)<br>从最基础的任务开始做起，我会持续将任务代码提交到<a href="https://github.com/cheeseKun" target="_blank" rel="external">github</a>上去<br>有兴趣的可以去看下,然后随手star是美德，(｡･ω･｡)ﾉ♡</p>
<h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><p>我在每个任务下面都写上README，上面有代码的demo链接和任务描述<br>所以记得点README<br>下面po上每个学院的快捷链接,点击即可</p>
<ul>
<li><p>勇士级任务</p>
<ul>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E5%B0%8F%E8%96%87%E5%AD%A6%E9%99%A2" target="_blank" rel="external">小薇学院</a><blockquote>
<p>零基础入门HTML/CSS</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E6%96%8C%E6%96%8C%E5%AD%A6%E9%99%A2" target="_blank" rel="external">斌斌学院</a><blockquote>
<p>从0开始学习JavaScript</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E8%80%80%E8%80%80%E5%AD%A6%E9%99%A2" target="_blank" rel="external">耀耀学院</a><blockquote>
<p>趣味小游戏，交互小实战，综合小练习</p>
</blockquote>
</li>
</ul>
</li>
<li><p>王者级任务</p>
<ul>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E7%B3%AF%E7%B1%B3%E5%89%8D%E7%AB%AF%E5%AD%A6%E9%99%A2" target="_blank" rel="external">百度糯米前端技术学院</a><blockquote>
<p>包含B(Business)&amp;C(Customs)两端，应用场景涵盖PC、NA和WAP三端。</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/ECharts%20%26%20WebVR%E5%AD%A6%E9%99%A2" target="_blank" rel="external">ECharts &amp; WebVR学院</a><blockquote>
<p>基于ECharts将手上的数据制作成美观的可视化作品,<br>以及如何使用WebVR制作VR展现。</p>
</blockquote>
</li>
<li><a href="https://github.com/cheeseKun/baiduIFE2017/tree/master/%E5%95%86%E4%B8%9A%E5%B9%B3%E5%8F%B0%E5%AD%A6%E9%99%A2" target="_blank" rel="external">商业平台学院</a><blockquote>
<p>提供Web前端、还有iOS、Android方向</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>2.24到4.24，两个月时间，尽力高质量完成多些任务吧。<br>。<br>。<br>。<br>加油。。。(ﾉﾟ▽ﾟ)ﾉ</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ife2017 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初1-2」こねは　本です]]></title>
      <url>http://cheesekun.top/2017/02/26/cheesekun.top/ch1004/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>ノー   ト　　笔记本<blockquote>
<p>note<br>日本語のノート　-&gt;  日语笔记</p>
</blockquote>
</li>
<li>カメラ　　照相机<blockquote>
<p>camera<br>カメラマン　　-&gt; 摄影师  cameraman</p>
</blockquote>
</li>
<li>テレビ　　电视机<blockquote>
<p>televi(sion)<br>テレビ·ドラマ　　-&gt; 电视连续剧 (television drama)</p>
</blockquote>
</li>
<li>お土産(おみやげ)　　礼物<blockquote>
<p>特产或者(赠送给别人的)礼物<br>誕生日のお土産　　-&gt; 生日礼物</p>
</blockquote>
</li>
<li>名産品(めいさんひん)　特产，名产<blockquote>
<p>多指当地特有的有名的物产<br>シルクはここの名産品です　-&gt; 丝绸是这里的特产</p>
</blockquote>
</li>
<li>シルク　　丝绸<blockquote>
<p>也泛指”丝织品” silk<br>シルクロード　-&gt;　丝绸之路  (silk road)</p>
</blockquote>
</li>
<li>方 (かた)  （敬语）位，人<blockquote>
<p>表示对所指人的敬称<br>この方 -&gt; 这一位<br>日本の方　-&gt; 日本人  (询问是否为日本人时有礼貌)</p>
</blockquote>
</li>
<li>家族　(かぞく)　家人，家属<blockquote>
<p>表示配偶或有血缘关系的家人，家属等， <span class="red">而不是传统中文的大范围</span><br>大家族　-&gt; 大家庭<br>核家族　-&gt; 小家庭</p>
</blockquote>
</li>
<li>母 (はは)　(我)母亲<blockquote>
<p>与他人谈及自己母亲时使用，(家母)不需要私の<br>母の日　-&gt; 母亲节<br>母は先生です　-&gt; 我妈妈是老师</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li><p>范围指代<br>A: これは小野さんのカメラですか　-&gt; 这是小野的相机吗?<br>B： いいえ、それは森さんのカメラです　-&gt; 不，那是森的相机</p>
</li>
<li><p>近称 -&gt; これ·この</p>
<blockquote>
<p>これは本です　　-&gt; 这是书</p>
<ul>
<li>中称 -&gt;　それ·その<br>それはかばんです　-&gt; 那是包</li>
<li>远称 -&gt;　あれ·あの<br>あれはテレビんです　-&gt; 那是电视机<br>あのノートはだれのですか　　-&gt; 那本笔记本是谁的</li>
<li>不定称 -&gt;　どれ·どの  (疑问，哪一个)<br>用于3个或者3个以上选项不确定的时候<br>森さんのかばんはどれですか　-&gt; 森先生的包是哪个?<br>小野さんの机はどなの机ですか -&gt; 小野的桌子是哪张桌子?</li>
</ul>
</blockquote>
</li>
<li>だれ(誰)ですか　　…是谁?<blockquote>
<p><span class="red">提问人物，用 どなた　比较礼貌</span><br>小野先生はどなたですか　-&gt; 小野老师是哪位?</p>
</blockquote>
</li>
<li>何（なん）ですか　　…是什么?<blockquote>
<p>それは何ですか　　-&gt; 那是什么?</p>
</blockquote>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flex布局]]></title>
      <url>http://cheesekun.top/2017/02/24/cheesekun.top/ch1003/</url>
      <content type="html"><![CDATA[<p>使用flex布局特别方便，虽然兼容性问题还是需要解决<br>下面参考了<a href="https://zhuanlan.zhihu.com/p/25303493" target="_blank" rel="external">30分钟学会flex布局</a><br>简化了很多，帮助记忆。<br>。<br>。<br>实现 flex 布局需要先指定一个容器，任何一个容器都可以被置顶为 flex 布局，<br>这样容器内部的元素就可以使用 flex 来进行布局。</p>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>
   <span class="token property">display</span><span class="token punctuation">:</span> flex | inline-flex<span class="token punctuation">;</span>     //可以有两种取值
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>分别生成一个块状或行内的 flex 容器盒子。简单说来，如果你使用块元素如 div，你就可以使用 flex，而如果你使用行内元素，你可以使用 inline-flex。<br><strong>当设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p>
<h2 id="属性介绍"><a href="#属性介绍" class="headerlink" title="属性介绍"></a>属性介绍</h2><ul>
<li>对父属性<ul>
<li>flex-direction<blockquote>
<p>定义主轴方向<br>row<br>row-reverse<br>column<br>column-reverse</p>
</blockquote>
</li>
<li>flex-wrap<blockquote>
<p>定义flex元素单行还是多行显示<br>nowrap<br>wrap<br>wrap-reverse</p>
</blockquote>
</li>
<li>flex-flow<blockquote>
<p>flex-direction 和 flex-wrap 缩写</p>
</blockquote>
</li>
<li>justify-content<blockquote>
<p>将flex元素与主轴对齐<br>flex-start<br>flex-end<br>center<br>space-around    （每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍）<br>space-between （两端对齐，项目之间的间隔相等，即剩余空间等分成间隙）</p>
</blockquote>
</li>
<li>align-items<blockquote>
<p>在交叉轴上对齐多个元素<br>stretch （默认值，如果项目未设置高度或者设为 auto，将占满整个容器的高度）<br>flex-start<br>flex-end<br>center<br>baseline （项目的第一行文字的基线对齐 也就是对齐各个flex元素第一行文字的基线）</p>
</blockquote>
</li>
<li>align-content<blockquote>
<p>当交叉轴有多余空间时，对齐容器内的轴线<br>stretch<br>flex-start<br>flex-end<br>center<br>space-between<br>space-around</p>
</blockquote>
</li>
</ul>
</li>
<li><p>对子属性</p>
<ul>
<li>align-self<blockquote>
<p>在交叉轴上对齐一个元素,覆盖align-items所设的值<br>flex-start<br>flex-end<br>center<br>baseline<br>stretch</p>
</blockquote>
</li>
<li>order<blockquote>
<p>决定flex元素的顺序<br>0</p>
</blockquote>
</li>
<li>flex-basis<blockquote>
<p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间<br><strong>当主轴为水平方向的时候，当设置了 flex-basis</strong><br><strong>flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</strong></p>
</blockquote>
</li>
<li>flex-grow<blockquote>
<p>定义flex元素的放大比例<br>默认值为 0，即如果存在剩余空间，也不放大<br>当所有的项目都以 flex-basis 的值进行排列后，仍有剩余空间，那么这时候 flex-grow 就会发挥作用了<br>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)<br>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>
</blockquote>
</li>
<li>flex-shrink<blockquote>
<p>定义了项目的缩小比例<br>默认值: 1，即如果空间不足，该项目将缩小，负值对该属性无效。<br>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。<br>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p>
</blockquote>
</li>
<li><p>flex</p>
<blockquote>
<p>flex-grow, flex-shrink 和 flex-basis的简写</p>
</blockquote>
<pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span></span><span class="token punctuation">{</span>
   <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">'flex-grow'</span>> &lt;<span class="token string">'flex-shrink'</span>>? || &lt;<span class="token string">'flex-basis'</span>> ]
<span class="token punctuation">}</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>默认值：0 1 auto， 即不放大，可缩小，大小与 width、height<br>建议优先使用这个属性，而不是单独写三个分离的属性。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="小实例"><a href="#小实例" class="headerlink" title="小实例"></a>小实例</h2><p><a href="http://codepen.io/cheesekun/pen/EZqKVm" target="_blank" rel="external">codepen杂实例</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
            <tag> 布局 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「标日·初1-1」李さんは　中国人です]]></title>
      <url>http://cheesekun.top/2017/02/23/cheesekun.top/ch1002/</url>
      <content type="html"><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><ul>
<li>先生 (せんせい)   老师<blockquote>
<p>老师，医生和律师<br>大学の先生　-&gt; 大学老师</p>
</blockquote>
</li>
<li>社员 (しゃいん)   职员<blockquote>
<p>某一公司的人，<span class="red">使用前会出现较明确的所属公司</span><br>旅行会社の社员  -&gt; 旅行社的职员</p>
</blockquote>
</li>
<li>会社员 (かいしゃいん)　公司职员<blockquote>
<p>笼统概念，表示一种职业<br>兄は会社员ではあぃません　　-&gt; 我哥不是公司职员</p>
</blockquote>
</li>
<li>父 (ちち)　　(我)父亲<blockquote>
<p>在与外人谈论自己父亲时使用，已包含 我的ちち，所以直接代表我的父亲，不需要加　私の父<br>父は中国人です　-&gt; 我父亲是日本人</p>
</blockquote>
</li>
<li>あの人 (あのひと)  那个人<blockquote>
<p>表示第三人称， 不强调性别<br>あの人は田中さんですか．　-&gt; 那人是田中君吗？</p>
</blockquote>
</li>
<li>私　（わたし）　我<blockquote>
<p>第一人称， 男女通用，<span class="red">会话中多被省略</span><br>私は学生です。 -&gt; 我是学生</p>
</blockquote>
</li>
<li>あなた　　　　你<blockquote>
<p>第二人称， 不知道对方姓名但必须称呼对方时使用<br><span class="red">老婆称呼老公，也会使用</span><br>あなたはせん先生ですか　　-&gt; 你是老师吗？</p>
</blockquote>
</li>
<li>どうも　　　「副」非常，很<blockquote>
<p>一般用在表示道歉或感谢。<span class="red">当关系特别好时，どうも就可以直接表示感谢或道歉</span><br>どうもすみません　　　-&gt; 实在对不起</p>
</blockquote>
</li>
<li>あつ　　　「叹」哎 哎呀<blockquote>
<p>吃惊或情急下发出的声音<br>あつ、すみません。　　-&gt; 呀，对不起</p>
</blockquote>
</li>
<li>ちがいます　　不是<blockquote>
<p>针对一般疑问句所做出的否定回答<br>A: あの人は教授ですか　-&gt; 那人是教授吗<br>B: いいえ、ちがいます　-&gt; 不，不是的</p>
</blockquote>
</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>肯定句<ul>
<li>名は名です   ..是..<blockquote>
<p>用于现在时或将来时<br>明日は雨です　　-&gt; 明天下雨</p>
</blockquote>
</li>
<li>名1は名2では(じや)あぃません   ..不是..<blockquote>
<p>仅适用与二者都是名词的情况<br>口语使用<span class="red">通常把 では　换成　じや</span><br>明日は日曜日じやあぃません　-&gt; 明天不是星期天</p>
</blockquote>
</li>
</ul>
</li>
<li>疑问句及应答<ul>
<li>名1は名2ですか  ..是..吗?<blockquote>
<p>助词表示疑问。日语问句在句末不使用“?”<br>A: あの人は田中さんですか  -&gt; 那个人是田中吗?</p>
</blockquote>
</li>
<li>はい、そうです　-&gt; 是，是的</li>
<li>いいえ、ちがいます　-&gt;　不，不是的</li>
<li>分(わ)かぃません   -&gt;  不知道</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
            <tag> 标准日本语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[教练,我要学日语]]></title>
      <url>http://cheesekun.top/2017/02/22/cheesekun.top/ch1001/</url>
      <content type="html"><![CDATA[<p>从小以来一直在看动漫<br>大学又喜欢上日剧<br>耳濡目染<br>对日语产生了很大兴趣<br>大学4年想花些时间学好它<br>以后去日本才能去勾搭穿校服的日本妹子<br>没错，日漫里，女孩子说</p>
<blockquote>
<p>ね。。。xx君</p>
</blockquote>
<p>的时候<br>好可爱。。(ﾉﾟ▽ﾟ)ﾉ<br>没错，就是这么单纯的目的<br>我之后会不定期更新在沪江网学习的「标准日本语」<br>也算是督促自己吧<br>(ﾉﾟ▽ﾟ)ﾉ<br>又水一贴</p>
]]></content>
      
        <categories>
            
            <category> 日语 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终究到 hexo]]></title>
      <url>http://cheesekun.top/2017/02/21/cheesekun.top/ch1000/</url>
      <content type="html"><![CDATA[<p>一开始在使用wordpress写博客还是hexo写博客上纠结了很久<br>然而拗不过wordpress是世界上使用人数最多的博客系统，所以就强行用了<br>然而对于有强迫症的我来说，wordpress的文字排版要我命<br>经常性得为一篇文章进行各种修改，orz受不了<br>后来接触了markdown，用它来写东西简直爽到飞起<br>完全不需要care排版，可以专心写东西<br>并且更巧的是，hexo的博文都是需要用markdown模式来写！！！<br>美滋滋。。<br>因此，放弃了使用几个月的wordpress，现在专心使用hexo。<br>并且，<br>现在不用交那万恶的服务器费用啦。<br>hhhhhhh…..(ﾉﾟ▽ﾟ)ﾉ</p>
<hr>
<p>下面来写几条hexo比较常使用的git:</p>
<ul>
<li>生成静态文件<pre class="line-numbers language-git"><code class="language-git">$ hexo generate
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>运行hexo本地服务器<pre class="line-numbers language-git"><code class="language-git">$ hexo server
[http://localhost:4000/](http://localhost:4000/)
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li>安装主题<pre class="line-numbers language-git"><code class="language-git">cd/hexo/themes
git clone https://主题下载链接
cd ./主题目录、
git pull
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>然后修改/hexo/config.yml, 将其中的theme改为主题名称<br>重新运行 $ hexo generate $ hexo server</p>
</blockquote>
</li>
<li>上传hexo到github<pre class="line-numbers language-git"><code class="language-git">hexo generate
hexo deploy
//简写合并如下
hexo d -g
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
。<br>。<br>。<br>大概就这样，水完第一篇<br>。<br>(ﾉﾟ▽ﾟ)ﾉ</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
