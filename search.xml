<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[flex布局]]></title>
      <url>https://cheesekun.github.io/2017/02/21/flex/</url>
      <content type="html"><![CDATA[<p>实现 flex 布局需要先指定一个容器，任何一个容器都可以被置顶为 flex 布局，<br>这样容器内部的元素就可以使用 flex 来进行布局。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">   display: flex | inline-flex;     //可以有两种取值</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分别生成一个块状或行内的 flex 容器盒子。简单说来，如果你使用块元素如 div，你就可以使用 flex，而如果你使用行内元素，你可以使用 inline-flex。<br><strong>当设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p>
<ul>
<li><p>属性介绍</p>
<ul>
<li>对父属性<ul>
<li>flex-direction<blockquote>
<p>定义主轴方向<br>row<br>row-reverse<br>column<br>column-reverse</p>
</blockquote>
</li>
<li>flex-wrap<blockquote>
<p>定义flex元素单行还是多行显示<br>nowrap<br>wrap<br>wrap-reverse</p>
</blockquote>
</li>
<li>flex-flow<blockquote>
<p>flex-direction 和 flex-wrap 缩写</p>
</blockquote>
</li>
<li>justify-content<blockquote>
<p>将flex元素与主轴对齐<br>flex-start<br>flex-end<br>center<br>space-around    （每个项目两侧的间隔相等，所以项目之间的间隔比项目与边缘的间隔大一倍）<br>space-between （两端对齐，项目之间的间隔相等，即剩余空间等分成间隙）</p>
</blockquote>
</li>
<li>align-items<blockquote>
<p>在交叉轴上对齐多个元素<br>stretch （默认值，如果项目未设置高度或者设为 auto，将占满整个容器的高度）<br>flex-start<br>flex-end<br>center<br>baseline （项目的第一行文字的基线对齐 也就是对齐各个flex元素第一行文字的基线）</p>
</blockquote>
</li>
<li>align-content<blockquote>
<p>当交叉轴有多余空间时，对齐容器内的轴线<br>stretch<br>flex-start<br>flex-end<br>center<br>space-between<br>space-around</p>
</blockquote>
</li>
</ul>
</li>
<li><p>对子属性</p>
<ul>
<li>align-self<blockquote>
<p>在交叉轴上对齐一个元素,覆盖align-items所设的值<br>flex-start<br>flex-end<br>center<br>baseline<br>stretch</p>
</blockquote>
</li>
<li>order<blockquote>
<p>决定flex元素的顺序<br>0</p>
</blockquote>
</li>
<li>flex-basis<blockquote>
<p>定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间<br><strong>当主轴为水平方向的时候，当设置了 flex-basis</strong><br><strong>flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</strong></p>
</blockquote>
</li>
<li>flex-grow<blockquote>
<p>定义flex元素的放大比例<br>默认值为 0，即如果存在剩余空间，也不放大<br>当所有的项目都以 flex-basis 的值进行排列后，仍有剩余空间，那么这时候 flex-grow 就会发挥作用了<br>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间。(如果有的话)<br>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>
</blockquote>
</li>
<li>flex-shrink<blockquote>
<p>定义了项目的缩小比例<br>默认值: 1，即如果空间不足，该项目将缩小，负值对该属性无效。<br>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。<br>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p>
</blockquote>
</li>
<li><p>flex</p>
<blockquote>
<p>flex-grow, flex-shrink 和 flex-basis的简写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item&#123;</div><div class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认值：0 1 auto， 即不放大，可缩小，大小与 width、height<br>建议优先使用这个属性，而不是单独写三个分离的属性。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>小实例<br>  <a href="http://codepen.io/cheesekun/pen/EZqKVm" target="_blank" rel="external">codepen杂实例</a></li>
</ul>
]]></content>
      
        
    </entry>
    
  
  
</search>
